/* Autogenerated by s7ffi (genffi.scm) */
#include "../sndlib/s7.h"
#include "CmSupport.h"

s7_pointer strduped_string(s7_scheme* sc, char* str) {
  s7_pointer res=s7_make_string(sc,str);
  free(str);
  return res;
}

s7_pointer make_s7_boolean(s7_scheme *s7, bool b)
{
  // MSVS: incompatibility between c++ bool and sndlib bool
  return s7_make_boolean(s7, ((b) ? 1 : 0));
}

s7_pointer ffi_quit (s7_scheme *s7, s7_pointer args)
{
  cm_quit();
  return s7_UNSPECIFIED(s7);
}

s7_pointer ffi_print_error (s7_scheme *s7, s7_pointer args)
{
  char* s0;
  if (!s7_is_string(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_print_error", 1, s7_car(args), "a c-string"));
  s0=(char*)s7_string(s7_car(args));
  args=s7_cdr(args);
  cm_print_error(s0);
  return s7_UNSPECIFIED(s7);
}

s7_pointer ffi_print_output (s7_scheme *s7, s7_pointer args)
{
  char* s0;
  if (!s7_is_string(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_print_output", 1, s7_car(args), "a c-string"));
  s0=(char*)s7_string(s7_car(args));
  args=s7_cdr(args);
  cm_print_output(s0);
  return s7_UNSPECIFIED(s7);
}

s7_pointer ffi_print_values (s7_scheme *s7, s7_pointer args)
{
  char* s0;
  if (!s7_is_string(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_print_values", 1, s7_car(args), "a c-string"));
  s0=(char*)s7_string(s7_car(args));
  args=s7_cdr(args);
  cm_print_values(s0);
  return s7_UNSPECIFIED(s7);
}

s7_pointer ffi_print_warning (s7_scheme *s7, s7_pointer args)
{
  char* s0;
  if (!s7_is_string(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_print_warning", 1, s7_car(args), "a c-string"));
  s0=(char*)s7_string(s7_car(args));
  args=s7_cdr(args);
  cm_print_warning(s0);
  return s7_UNSPECIFIED(s7);
}

s7_pointer ffi_print_stdout (s7_scheme *s7, s7_pointer args)
{
  char* s0;
  if (!s7_is_string(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_print_stdout", 1, s7_car(args), "a c-string"));
  s0=(char*)s7_string(s7_car(args));
  args=s7_cdr(args);
  cm_print_stdout(s0);
  return s7_UNSPECIFIED(s7);
}

s7_pointer ffi_cm_print (s7_scheme *s7, s7_pointer args)
{
  s7_pointer p0, p1;
  if (!(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_cm_print", 1, s7_car(args), "a s7_pointer"));
  p1=s7_car(args);
  args=s7_cdr(args);
  p0=cm_print(p1);
  return p0;
}

s7_pointer ffi_shell (s7_scheme *s7, s7_pointer args)
{
  char* s0;
  if (!s7_is_string(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_shell", 1, s7_car(args), "a c-string"));
  s0=(char*)s7_string(s7_car(args));
  args=s7_cdr(args);
  cm_shell(s0);
  return s7_UNSPECIFIED(s7);
}

s7_pointer ffi_play (s7_scheme *s7, s7_pointer args)
{
  char* s0;
  if (!s7_is_string(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_play", 1, s7_car(args), "a c-string"));
  s0=(char*)s7_string(s7_car(args));
  args=s7_cdr(args);
  cm_play(s0);
  return s7_UNSPECIFIED(s7);
}

s7_pointer ffi_load (s7_scheme *s7, s7_pointer args)
{
  char* s0;
  if (!s7_is_string(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_load", 1, s7_car(args), "a c-string"));
  s0=(char*)s7_string(s7_car(args));
  args=s7_cdr(args);
  cm_load(s0);
  return s7_UNSPECIFIED(s7);
}

s7_pointer ffi_rescale (s7_scheme *s7, s7_pointer args)
{
  double f0, f1, f2, f3, f4, f5, f6;
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_rescale", 1, s7_car(args), "a double"));
  f1=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_rescale", 2, s7_car(args), "a double"));
  f2=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_rescale", 3, s7_car(args), "a double"));
  f3=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_rescale", 4, s7_car(args), "a double"));
  f4=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_rescale", 5, s7_car(args), "a double"));
  f5=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_rescale", 6, s7_car(args), "a double"));
  f6=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  f0=cm_rescale(f1, f2, f3, f4, f5, f6);
  return s7_make_real(s7, f0);
}

s7_pointer ffi_discrete (s7_scheme *s7, s7_pointer args)
{
  double f0, f1, f2, f3;
  int i0, i1, i2;
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_discrete", 1, s7_car(args), "a double"));
  f0=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_discrete", 2, s7_car(args), "a double"));
  f1=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_discrete", 3, s7_car(args), "a double"));
  f2=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_discrete", 4, s7_car(args), "a int"));
  i1=(int)s7_integer(s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_discrete", 5, s7_car(args), "a int"));
  i2=(int)s7_integer(s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_discrete", 6, s7_car(args), "a double"));
  f3=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  i0=cm_discrete(f0, f1, f2, i1, i2, f3);
  return s7_make_integer(s7, i0);
}

s7_pointer ffi_float_to_fixnum (s7_scheme *s7, s7_pointer args)
{
  double f0;
  int i0;
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_float_to_fixnum", 1, s7_car(args), "a double"));
  f0=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  i0=cm_float_to_fixnum(f0);
  return s7_make_integer(s7, i0);
}

s7_pointer ffi_quantize (s7_scheme *s7, s7_pointer args)
{
  double f0, f1, f2;
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_quantize", 1, s7_car(args), "a double"));
  f1=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_quantize", 2, s7_car(args), "a double"));
  f2=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  f0=cm_quantize(f1, f2);
  return s7_make_real(s7, f0);
}

s7_pointer ffi_rhythm_to_seconds (s7_scheme *s7, s7_pointer args)
{
  double f0, f1, f2, f3;
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_rhythm_to_seconds", 1, s7_car(args), "a double"));
  f1=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_rhythm_to_seconds", 2, s7_car(args), "a double"));
  f2=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_rhythm_to_seconds", 3, s7_car(args), "a double"));
  f3=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  f0=cm_rhythm_to_seconds(f1, f2, f3);
  return s7_make_real(s7, f0);
}

s7_pointer ffi_cents_to_scaler (s7_scheme *s7, s7_pointer args)
{
  double f0, f1;
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_cents_to_scaler", 1, s7_car(args), "a double"));
  f1=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  f0=cm_cents_to_scaler(f1);
  return s7_make_real(s7, f0);
}

s7_pointer ffi_scaler_to_cents (s7_scheme *s7, s7_pointer args)
{
  double f0, f1;
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_scaler_to_cents", 1, s7_car(args), "a double"));
  f1=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  f0=cm_scaler_to_cents(f1);
  return s7_make_real(s7, f0);
}

s7_pointer ffi_scaler_to_steps (s7_scheme *s7, s7_pointer args)
{
  double f0, f1;
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_scaler_to_steps", 1, s7_car(args), "a double"));
  f1=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  f0=cm_scaler_to_steps(f1);
  return s7_make_real(s7, f0);
}

s7_pointer ffi_explseg (s7_scheme *s7, s7_pointer args)
{
  double f0, f1, f2;
  int i0, i1;
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_explseg", 1, s7_car(args), "a int"));
  i0=(int)s7_integer(s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_explseg", 2, s7_car(args), "a int"));
  i1=(int)s7_integer(s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_explseg", 3, s7_car(args), "a double"));
  f1=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_explseg", 4, s7_car(args), "a double"));
  f2=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  f0=cm_explseg(i0, i1, f1, f2);
  return s7_make_real(s7, f0);
}

s7_pointer ffi_geoseg (s7_scheme *s7, s7_pointer args)
{
  double f0, f1, f2;
  int i0, i1;
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_geoseg", 1, s7_car(args), "a int"));
  i0=(int)s7_integer(s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_geoseg", 2, s7_car(args), "a int"));
  i1=(int)s7_integer(s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_geoseg", 3, s7_car(args), "a double"));
  f1=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_geoseg", 4, s7_car(args), "a double"));
  f2=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  f0=cm_geoseg(i0, i1, f1, f2);
  return s7_make_real(s7, f0);
}

s7_pointer ffi_keynum_to_hertz (s7_scheme *s7, s7_pointer args)
{
  double f0, f1;
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_keynum_to_hertz", 1, s7_car(args), "a double"));
  f1=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  f0=cm_keynum_to_hertz(f1);
  return s7_make_real(s7, f0);
}

s7_pointer ffi_keynum_to_pc (s7_scheme *s7, s7_pointer args)
{
  double f0;
  int i0;
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_keynum_to_pc", 1, s7_car(args), "a double"));
  f0=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  i0=cm_keynum_to_pc(f0);
  return s7_make_integer(s7, i0);
}

s7_pointer ffi_hertz_to_keynum (s7_scheme *s7, s7_pointer args)
{
  double f0, f1;
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_hertz_to_keynum", 1, s7_car(args), "a double"));
  f1=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  f0=cm_hertz_to_keynum(f1);
  return s7_make_real(s7, f0);
}

s7_pointer ffi_get_random_seed (s7_scheme *s7, s7_pointer args)
{
  s7_pointer p0;
  p0=cm_get_random_seed();
  return p0;
}

s7_pointer ffi_set_random_seed (s7_scheme *s7, s7_pointer args)
{
  s7_pointer p0;
  if (!(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_set_random_seed", 1, s7_car(args), "a s7_pointer"));
  p0=s7_car(args);
  args=s7_cdr(args);
  cm_set_random_seed(p0);
  return s7_UNSPECIFIED(s7);
}

s7_pointer ffi_ranint (s7_scheme *s7, s7_pointer args)
{
  int i0, i1;
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_ranint", 1, s7_car(args), "a int"));
  i1=(int)s7_integer(s7_car(args));
  args=s7_cdr(args);
  i0=cm_ranint(i1);
  return s7_make_integer(s7, i0);
}

s7_pointer ffi_ranfloat (s7_scheme *s7, s7_pointer args)
{
  double f0, f1;
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_ranfloat", 1, s7_car(args), "a double"));
  f1=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  f0=cm_ranfloat(f1);
  return s7_make_real(s7, f0);
}

s7_pointer ffi_ranint2 (s7_scheme *s7, s7_pointer args)
{
  int i0, i1, i2;
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_ranint2", 1, s7_car(args), "a int"));
  i1=(int)s7_integer(s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_ranint2", 2, s7_car(args), "a int"));
  i2=(int)s7_integer(s7_car(args));
  args=s7_cdr(args);
  i0=cm_ranint2(i1, i2);
  return s7_make_integer(s7, i0);
}

s7_pointer ffi_ranfloat2 (s7_scheme *s7, s7_pointer args)
{
  double f0, f1, f2;
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_ranfloat2", 1, s7_car(args), "a double"));
  f1=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_ranfloat2", 2, s7_car(args), "a double"));
  f2=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  f0=cm_ranfloat2(f1, f2);
  return s7_make_real(s7, f0);
}

s7_pointer ffi_ranlow (s7_scheme *s7, s7_pointer args)
{
  double f0;
  f0=cm_ranlow();
  return s7_make_real(s7, f0);
}

s7_pointer ffi_ranhigh (s7_scheme *s7, s7_pointer args)
{
  double f0;
  f0=cm_ranhigh();
  return s7_make_real(s7, f0);
}

s7_pointer ffi_ranmiddle (s7_scheme *s7, s7_pointer args)
{
  double f0;
  f0=cm_ranmiddle();
  return s7_make_real(s7, f0);
}

s7_pointer ffi_rangauss (s7_scheme *s7, s7_pointer args)
{
  double f0, f1, f2;
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_rangauss", 1, s7_car(args), "a double"));
  f1=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_rangauss", 2, s7_car(args), "a double"));
  f2=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  f0=cm_rangauss(f1, f2);
  return s7_make_real(s7, f0);
}

s7_pointer ffi_ranexp (s7_scheme *s7, s7_pointer args)
{
  double f0, f1;
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_ranexp", 1, s7_car(args), "a double"));
  f1=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  f0=cm_ranexp(f1);
  return s7_make_real(s7, f0);
}

s7_pointer ffi_ranbeta (s7_scheme *s7, s7_pointer args)
{
  double f0, f1, f2;
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_ranbeta", 1, s7_car(args), "a double"));
  f1=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_ranbeta", 2, s7_car(args), "a double"));
  f2=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  f0=cm_ranbeta(f1, f2);
  return s7_make_real(s7, f0);
}

s7_pointer ffi_rangamma (s7_scheme *s7, s7_pointer args)
{
  double f0, f1;
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_rangamma", 1, s7_car(args), "a double"));
  f1=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  f0=cm_rangamma(f1);
  return s7_make_real(s7, f0);
}

s7_pointer ffi_rancauchy (s7_scheme *s7, s7_pointer args)
{
  double f0;
  f0=cm_rancauchy();
  return s7_make_real(s7, f0);
}

s7_pointer ffi_ranpoisson (s7_scheme *s7, s7_pointer args)
{
  double f0;
  int i0;
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_ranpoisson", 1, s7_car(args), "a double"));
  f0=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  i0=cm_ranpoisson(f0);
  return s7_make_integer(s7, i0);
}

s7_pointer ffi_ranpink (s7_scheme *s7, s7_pointer args)
{
  double f0;
  f0=cm_ranpink();
  return s7_make_real(s7, f0);
}

s7_pointer ffi_ranbrown (s7_scheme *s7, s7_pointer args)
{
  double f0;
  f0=cm_ranbrown();
  return s7_make_real(s7, f0);
}

s7_pointer ffi_bes_jn (s7_scheme *s7, s7_pointer args)
{
  double f0, f1;
  int i0;
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_bes_jn", 1, s7_car(args), "a int"));
  i0=(int)s7_integer(s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_bes_jn", 2, s7_car(args), "a double"));
  f1=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  f0=cm_bes_jn(i0, f1);
  return s7_make_real(s7, f0);
}

s7_pointer ffi_log_ten (s7_scheme *s7, s7_pointer args)
{
  double f0, f1;
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_log_ten", 1, s7_car(args), "a double"));
  f1=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  f0=cm_log_ten(f1);
  return s7_make_real(s7, f0);
}

s7_pointer ffi_log_two (s7_scheme *s7, s7_pointer args)
{
  double f0, f1;
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_log_two", 1, s7_car(args), "a double"));
  f1=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  f0=cm_log_two(f1);
  return s7_make_real(s7, f0);
}

s7_pointer ffi_now (s7_scheme *s7, s7_pointer args)
{
  double f0;
  f0=cm_now();
  return s7_make_real(s7, f0);
}

s7_pointer ffi_sched_sprout (s7_scheme *s7, s7_pointer args)
{
  double f0, f1;
  int i0, i1;
  s7_pointer p0;
  if (!(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_sched_sprout", 1, s7_car(args), "a s7_pointer"));
  p0=s7_car(args);
  args=s7_cdr(args);
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_sched_sprout", 2, s7_car(args), "a double"));
  f0=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_sched_sprout", 3, s7_car(args), "a int"));
  i0=(int)s7_integer(s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_sched_sprout", 4, s7_car(args), "a int"));
  i1=(int)s7_integer(s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_sched_sprout", 5, s7_car(args), "a double"));
  f1=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  cm_sched_sprout(p0, f0, i0, i1, f1);
  return s7_UNSPECIFIED(s7);
}

s7_pointer ffi_sched_paused_p (s7_scheme *s7, s7_pointer args)
{
  bool b0;
  b0=cm_sched_paused_p();
  return make_s7_boolean(s7, b0);
}

s7_pointer ffi_sched_pause (s7_scheme *s7, s7_pointer args)
{
  cm_sched_pause();
  return s7_UNSPECIFIED(s7);
}

s7_pointer ffi_sched_continue (s7_scheme *s7, s7_pointer args)
{
  cm_sched_continue();
  return s7_UNSPECIFIED(s7);
}

s7_pointer ffi_sched_stop (s7_scheme *s7, s7_pointer args)
{
  int i0;
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_sched_stop", 1, s7_car(args), "a int"));
  i0=(int)s7_integer(s7_car(args));
  args=s7_cdr(args);
  cm_sched_stop(i0);
  return s7_UNSPECIFIED(s7);
}

s7_pointer ffi_sched_stop_all (s7_scheme *s7, s7_pointer args)
{
  cm_sched_stop_all();
  return s7_UNSPECIFIED(s7);
}

s7_pointer ffi_sched_busy_p (s7_scheme *s7, s7_pointer args)
{
  bool b0;
  b0=cm_sched_busy_p();
  return make_s7_boolean(s7, b0);
}

s7_pointer ffi_sched_score_mode_p (s7_scheme *s7, s7_pointer args)
{
  bool b0;
  b0=cm_sched_score_mode_p();
  return make_s7_boolean(s7, b0);
}

s7_pointer ffi_sched_get_score_mode (s7_scheme *s7, s7_pointer args)
{
  int i0;
  i0=cm_sched_get_score_mode();
  return s7_make_integer(s7, i0);
}

s7_pointer ffi_sched_set_score_mode (s7_scheme *s7, s7_pointer args)
{
  int i0;
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_sched_set_score_mode", 1, s7_car(args), "a int"));
  i0=(int)s7_integer(s7_car(args));
  args=s7_cdr(args);
  cm_sched_set_score_mode(i0);
  return s7_UNSPECIFIED(s7);
}

s7_pointer ffi_sched_score_time (s7_scheme *s7, s7_pointer args)
{
  double f0;
  f0=cm_sched_score_time();
  return s7_make_real(s7, f0);
}

s7_pointer ffi_sched_metro_id_valid (s7_scheme *s7, s7_pointer args)
{
  int i0;
  bool b0;
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_sched_metro_id_valid", 1, s7_car(args), "a int"));
  i0=(int)s7_integer(s7_car(args));
  args=s7_cdr(args);
  b0=cm_sched_metro_id_valid(i0);
  return make_s7_boolean(s7, b0);
}

s7_pointer ffi_sched_make_metro (s7_scheme *s7, s7_pointer args)
{
  double f0;
  int i0;
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_sched_make_metro", 1, s7_car(args), "a double"));
  f0=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  i0=cm_sched_make_metro(f0);
  return s7_make_integer(s7, i0);
}

s7_pointer ffi_sched_delete_metro (s7_scheme *s7, s7_pointer args)
{
  int i0;
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_sched_delete_metro", 1, s7_car(args), "a int"));
  i0=(int)s7_integer(s7_car(args));
  args=s7_cdr(args);
  cm_sched_delete_metro(i0);
  return s7_UNSPECIFIED(s7);
}

s7_pointer ffi_sched_get_metros (s7_scheme *s7, s7_pointer args)
{
  bool b0;
  s7_pointer p0;
  if (!s7_is_boolean(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_sched_get_metros", 1, s7_car(args), "a bool"));
  b0=s7_boolean(s7, s7_car(args));
  args=s7_cdr(args);
  p0=cm_sched_get_metros(b0);
  return p0;
}

s7_pointer ffi_sched_set_tempo (s7_scheme *s7, s7_pointer args)
{
  double f0, f1;
  int i0;
  bool b0;
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_sched_set_tempo", 1, s7_car(args), "a double"));
  f0=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_sched_set_tempo", 2, s7_car(args), "a double"));
  f1=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_boolean(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_sched_set_tempo", 3, s7_car(args), "a bool"));
  b0=s7_boolean(s7, s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_sched_set_tempo", 4, s7_car(args), "a int"));
  i0=(int)s7_integer(s7_car(args));
  args=s7_cdr(args);
  cm_sched_set_tempo(f0, f1, b0, i0);
  return s7_UNSPECIFIED(s7);
}

s7_pointer ffi_sched_get_metro_beat (s7_scheme *s7, s7_pointer args)
{
  double f0;
  int i0;
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_sched_get_metro_beat", 1, s7_car(args), "a int"));
  i0=(int)s7_integer(s7_car(args));
  args=s7_cdr(args);
  f0=cm_sched_get_metro_beat(i0);
  return s7_make_real(s7, f0);
}

s7_pointer ffi_sched_get_metro_tempo (s7_scheme *s7, s7_pointer args)
{
  double f0;
  int i0;
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_sched_get_metro_tempo", 1, s7_car(args), "a int"));
  i0=(int)s7_integer(s7_car(args));
  args=s7_cdr(args);
  f0=cm_sched_get_metro_tempo(i0);
  return s7_make_real(s7, f0);
}

s7_pointer ffi_sched_sync_metros (s7_scheme *s7, s7_pointer args)
{
  double f0, f1;
  int i0, i1, i2;
  bool b0, b1;
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_sched_sync_metros", 1, s7_car(args), "a int"));
  i0=(int)s7_integer(s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_sched_sync_metros", 2, s7_car(args), "a double"));
  f0=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_sched_sync_metros", 3, s7_car(args), "a int"));
  i1=(int)s7_integer(s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_sched_sync_metros", 4, s7_car(args), "a double"));
  f1=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_boolean(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_sched_sync_metros", 5, s7_car(args), "a bool"));
  b1=s7_boolean(s7, s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_sched_sync_metros", 6, s7_car(args), "a int"));
  i2=(int)s7_integer(s7_car(args));
  args=s7_cdr(args);
  b0=cm_sched_sync_metros(i0, f0, i1, f1, b1, i2);
  return make_s7_boolean(s7, b0);
}

s7_pointer ffi_sched_metro_phase (s7_scheme *s7, s7_pointer args)
{
  double f0, f1;
  int i0;
  bool b0;
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_sched_metro_phase", 1, s7_car(args), "a double"));
  f0=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_sched_metro_phase", 2, s7_car(args), "a double"));
  f1=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_sched_metro_phase", 3, s7_car(args), "a int"));
  i0=(int)s7_integer(s7_car(args));
  args=s7_cdr(args);
  b0=cm_sched_metro_phase(f0, f1, i0);
  return make_s7_boolean(s7, b0);
}

s7_pointer ffi_sched_metro_dur (s7_scheme *s7, s7_pointer args)
{
  double f0, f1;
  int i0;
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_sched_metro_dur", 1, s7_car(args), "a double"));
  f1=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_sched_metro_dur", 2, s7_car(args), "a int"));
  i0=(int)s7_integer(s7_car(args));
  args=s7_cdr(args);
  f0=cm_sched_metro_dur(f1, i0);
  return s7_make_real(s7, f0);
}

s7_pointer ffi_user_home_directory (s7_scheme *s7, s7_pointer args)
{
  char* s0;
  s0=cm_user_home_directory();
  return strduped_string(s7, s0);
}

s7_pointer ffi_temp_directory (s7_scheme *s7, s7_pointer args)
{
  char* s0;
  s0=cm_temp_directory();
  return strduped_string(s7, s0);
}

s7_pointer ffi_current_directory (s7_scheme *s7, s7_pointer args)
{
  char* s0;
  s0=cm_current_directory();
  return strduped_string(s7, s0);
}

s7_pointer ffi_set_current_directory (s7_scheme *s7, s7_pointer args)
{
  bool b0;
  char* s0;
  if (!s7_is_string(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_set_current_directory", 1, s7_car(args), "a c-string"));
  s0=(char*)s7_string(s7_car(args));
  args=s7_cdr(args);
  b0=cm_set_current_directory(s0);
  return make_s7_boolean(s7, b0);
}

s7_pointer ffi_pathname_directory (s7_scheme *s7, s7_pointer args)
{
  char* s0; char* s1;
  if (!s7_is_string(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_pathname_directory", 1, s7_car(args), "a c-string"));
  s1=(char*)s7_string(s7_car(args));
  args=s7_cdr(args);
  s0=cm_pathname_directory(s1);
  return strduped_string(s7, s0);
}

s7_pointer ffi_pathname_name (s7_scheme *s7, s7_pointer args)
{
  char* s0; char* s1;
  if (!s7_is_string(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_pathname_name", 1, s7_car(args), "a c-string"));
  s1=(char*)s7_string(s7_car(args));
  args=s7_cdr(args);
  s0=cm_pathname_name(s1);
  return strduped_string(s7, s0);
}

s7_pointer ffi_pathname_type (s7_scheme *s7, s7_pointer args)
{
  char* s0; char* s1;
  if (!s7_is_string(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_pathname_type", 1, s7_car(args), "a c-string"));
  s1=(char*)s7_string(s7_car(args));
  args=s7_cdr(args);
  s0=cm_pathname_type(s1);
  return strduped_string(s7, s0);
}

s7_pointer ffi_full_pathname (s7_scheme *s7, s7_pointer args)
{
  char* s0; char* s1;
  if (!s7_is_string(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_full_pathname", 1, s7_car(args), "a c-string"));
  s1=(char*)s7_string(s7_car(args));
  args=s7_cdr(args);
  s0=cm_full_pathname(s1);
  return strduped_string(s7, s0);
}

s7_pointer ffi_pathname_exists_p (s7_scheme *s7, s7_pointer args)
{
  bool b0;
  char* s0;
  if (!s7_is_string(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_pathname_exists_p", 1, s7_car(args), "a c-string"));
  s0=(char*)s7_string(s7_car(args));
  args=s7_cdr(args);
  b0=cm_pathname_exists_p(s0);
  return make_s7_boolean(s7, b0);
}

s7_pointer ffi_pathname_writable_p (s7_scheme *s7, s7_pointer args)
{
  bool b0;
  char* s0;
  if (!s7_is_string(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_pathname_writable_p", 1, s7_car(args), "a c-string"));
  s0=(char*)s7_string(s7_car(args));
  args=s7_cdr(args);
  b0=cm_pathname_writable_p(s0);
  return make_s7_boolean(s7, b0);
}

s7_pointer ffi_pathname_directory_p (s7_scheme *s7, s7_pointer args)
{
  bool b0;
  char* s0;
  if (!s7_is_string(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_pathname_directory_p", 1, s7_car(args), "a c-string"));
  s0=(char*)s7_string(s7_car(args));
  args=s7_cdr(args);
  b0=cm_pathname_directory_p(s0);
  return make_s7_boolean(s7, b0);
}

s7_pointer ffi_directory (s7_scheme *s7, s7_pointer args)
{
  bool b0;
  char* s0;
  s7_pointer p0;
  if (!s7_is_string(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_directory", 1, s7_car(args), "a c-string"));
  s0=(char*)s7_string(s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_boolean(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_directory", 2, s7_car(args), "a bool"));
  b0=s7_boolean(s7, s7_car(args));
  args=s7_cdr(args);
  p0=cm_directory(s0, b0);
  return p0;
}

s7_pointer ffi_pathname_to_key (s7_scheme *s7, s7_pointer args)
{
  int i0;
  char* s0;
  if (!s7_is_string(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_pathname_to_key", 1, s7_car(args), "a c-string"));
  s0=(char*)s7_string(s7_car(args));
  args=s7_cdr(args);
  i0=cm_pathname_to_key(s0);
  return s7_make_integer(s7, i0);
}

s7_pointer ffi_insure_new_file_version (s7_scheme *s7, s7_pointer args)
{
  int i0, i1;
  char* s0;
  if (!s7_is_string(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_insure_new_file_version", 1, s7_car(args), "a c-string"));
  s0=(char*)s7_string(s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_insure_new_file_version", 2, s7_car(args), "a int"));
  i1=(int)s7_integer(s7_car(args));
  args=s7_cdr(args);
  i0=cm_insure_new_file_version(s0, i1);
  return s7_make_integer(s7, i0);
}

s7_pointer ffi_string_hash (s7_scheme *s7, s7_pointer args)
{
  int i0;
  char* s0;
  if (!s7_is_string(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_string_hash", 1, s7_car(args), "a c-string"));
  s0=(char*)s7_string(s7_car(args));
  args=s7_cdr(args);
  i0=cm_string_hash(s0);
  return s7_make_integer(s7, i0);
}

s7_pointer ffi_midifile_import (s7_scheme *s7, s7_pointer args)
{
  int i0;
  char* s0;
  s7_pointer p0, p1;
  if (!s7_is_string(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_midifile_import", 1, s7_car(args), "a c-string"));
  s0=(char*)s7_string(s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_midifile_import", 2, s7_car(args), "a int"));
  i0=(int)s7_integer(s7_car(args));
  args=s7_cdr(args);
  if (!(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_midifile_import", 3, s7_car(args), "a s7_pointer"));
  p1=s7_car(args);
  args=s7_cdr(args);
  p0=cm_midifile_import(s0, i0, p1);
  return p0;
}

s7_pointer ffi_midifile_header (s7_scheme *s7, s7_pointer args)
{
  char* s0;
  s7_pointer p0, p1;
  if (!s7_is_string(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_midifile_header", 1, s7_car(args), "a c-string"));
  s0=(char*)s7_string(s7_car(args));
  args=s7_cdr(args);
  if (!(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_midifile_header", 2, s7_car(args), "a s7_pointer"));
  p1=s7_car(args);
  args=s7_cdr(args);
  p0=cm_midifile_header(s0, p1);
  return p0;
}

s7_pointer ffi_sal_allocate_tokens (s7_scheme *s7, s7_pointer args)
{
  s7_pointer p0;
  p0=sal_allocate_tokens();
  return p0;
}

s7_pointer ffi_sal_free_tokens (s7_scheme *s7, s7_pointer args)
{
  s7_pointer p0, p1;
  if (!(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_sal_free_tokens", 1, s7_car(args), "a s7_pointer"));
  p1=s7_car(args);
  args=s7_cdr(args);
  p0=sal_free_tokens(p1);
  return p0;
}

s7_pointer ffi_sal_tokenize_file (s7_scheme *s7, s7_pointer args)
{
  s7_pointer p0, p1, p2, p3;
  if (!(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_sal_tokenize_file", 1, s7_car(args), "a s7_pointer"));
  p1=s7_car(args);
  args=s7_cdr(args);
  if (!(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_sal_tokenize_file", 2, s7_car(args), "a s7_pointer"));
  p2=s7_car(args);
  args=s7_cdr(args);
  if (!(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_sal_tokenize_file", 3, s7_car(args), "a s7_pointer"));
  p3=s7_car(args);
  args=s7_cdr(args);
  p0=sal_tokenize_file(p1, p2, p3);
  return p0;
}

s7_pointer ffi_sal_tokenize_string (s7_scheme *s7, s7_pointer args)
{
  s7_pointer p0, p1, p2, p3;
  if (!(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_sal_tokenize_string", 1, s7_car(args), "a s7_pointer"));
  p1=s7_car(args);
  args=s7_cdr(args);
  if (!(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_sal_tokenize_string", 2, s7_car(args), "a s7_pointer"));
  p2=s7_car(args);
  args=s7_cdr(args);
  if (!(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_sal_tokenize_string", 3, s7_car(args), "a s7_pointer"));
  p3=s7_car(args);
  args=s7_cdr(args);
  p0=sal_tokenize_string(p1, p2, p3);
  return p0;
}

s7_pointer ffi_sal_token_type (s7_scheme *s7, s7_pointer args)
{
  s7_pointer p0, p1;
  if (!(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_sal_token_type", 1, s7_car(args), "a s7_pointer"));
  p1=s7_car(args);
  args=s7_cdr(args);
  p0=sal_token_type(p1);
  return p0;
}

s7_pointer ffi_sal_token_string (s7_scheme *s7, s7_pointer args)
{
  s7_pointer p0, p1;
  if (!(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_sal_token_string", 1, s7_car(args), "a s7_pointer"));
  p1=s7_car(args);
  args=s7_cdr(args);
  p0=sal_token_string(p1);
  return p0;
}

s7_pointer ffi_sal_token_position (s7_scheme *s7, s7_pointer args)
{
  s7_pointer p0, p1;
  if (!(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_sal_token_position", 1, s7_car(args), "a s7_pointer"));
  p1=s7_car(args);
  args=s7_cdr(args);
  p0=sal_token_position(p1);
  return p0;
}

s7_pointer ffi_mouse_x (s7_scheme *s7, s7_pointer args)
{
  double f0, f1, f2, f3;
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_mouse_x", 1, s7_car(args), "a double"));
  f1=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_mouse_x", 2, s7_car(args), "a double"));
  f2=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_mouse_x", 3, s7_car(args), "a double"));
  f3=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  f0=cm_mouse_x(f1, f2, f3);
  return s7_make_real(s7, f0);
}

s7_pointer ffi_mouse_y (s7_scheme *s7, s7_pointer args)
{
  double f0, f1, f2, f3;
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_mouse_y", 1, s7_car(args), "a double"));
  f1=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_mouse_y", 2, s7_car(args), "a double"));
  f2=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_mouse_y", 3, s7_car(args), "a double"));
  f3=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  f0=cm_mouse_y(f1, f2, f3);
  return s7_make_real(s7, f0);
}

s7_pointer ffi_mouse_button (s7_scheme *s7, s7_pointer args)
{
  s7_pointer p0, p1, p2;
  if (!(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_mouse_button", 1, s7_car(args), "a s7_pointer"));
  p1=s7_car(args);
  args=s7_cdr(args);
  if (!(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_mouse_button", 2, s7_car(args), "a s7_pointer"));
  p2=s7_car(args);
  args=s7_cdr(args);
  p0=cm_mouse_button(p1, p2);
  return p0;
}

s7_pointer ffi_mp_open_output (s7_scheme *s7, s7_pointer args)
{
  int i0;
  bool b0;
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_mp_open_output", 1, s7_car(args), "a int"));
  i0=(int)s7_integer(s7_car(args));
  args=s7_cdr(args);
  b0=mp_open_output(i0);
  return make_s7_boolean(s7, b0);
}

s7_pointer ffi_mp_open_input (s7_scheme *s7, s7_pointer args)
{
  int i0;
  bool b0;
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_mp_open_input", 1, s7_car(args), "a int"));
  i0=(int)s7_integer(s7_car(args));
  args=s7_cdr(args);
  b0=mp_open_input(i0);
  return make_s7_boolean(s7, b0);
}

s7_pointer ffi_mp_close_output (s7_scheme *s7, s7_pointer args)
{
  int i0;
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_mp_close_output", 1, s7_car(args), "a int"));
  i0=(int)s7_integer(s7_car(args));
  args=s7_cdr(args);
  mp_close_output(i0);
  return s7_UNSPECIFIED(s7);
}

s7_pointer ffi_mp_close_input (s7_scheme *s7, s7_pointer args)
{
  int i0;
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_mp_close_input", 1, s7_car(args), "a int"));
  i0=(int)s7_integer(s7_car(args));
  args=s7_cdr(args);
  mp_close_input(i0);
  return s7_UNSPECIFIED(s7);
}

s7_pointer ffi_mp_open_score (s7_scheme *s7, s7_pointer args)
{
  char* s0;
  s7_pointer p0;
  if (!s7_is_string(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_mp_open_score", 1, s7_car(args), "a c-string"));
  s0=(char*)s7_string(s7_car(args));
  args=s7_cdr(args);
  if (!(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_mp_open_score", 2, s7_car(args), "a s7_pointer"));
  p0=s7_car(args);
  args=s7_cdr(args);
  mp_open_score(s0, p0);
  return s7_UNSPECIFIED(s7);
}

s7_pointer ffi_mp_close_score (s7_scheme *s7, s7_pointer args)
{
  mp_close_score();
  return s7_UNSPECIFIED(s7);
}

s7_pointer ffi_mp_send_note (s7_scheme *s7, s7_pointer args)
{
  s7_pointer p0, p1, p2, p3, p4;
  if (!(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_mp_send_note", 1, s7_car(args), "a s7_pointer"));
  p0=s7_car(args);
  args=s7_cdr(args);
  if (!(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_mp_send_note", 2, s7_car(args), "a s7_pointer"));
  p1=s7_car(args);
  args=s7_cdr(args);
  if (!(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_mp_send_note", 3, s7_car(args), "a s7_pointer"));
  p2=s7_car(args);
  args=s7_cdr(args);
  if (!(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_mp_send_note", 4, s7_car(args), "a s7_pointer"));
  p3=s7_car(args);
  args=s7_cdr(args);
  if (!(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_mp_send_note", 5, s7_car(args), "a s7_pointer"));
  p4=s7_car(args);
  args=s7_cdr(args);
  mp_send_note(p0, p1, p2, p3, p4);
  return s7_UNSPECIFIED(s7);
}

s7_pointer ffi_mp_send_data (s7_scheme *s7, s7_pointer args)
{
  double f0, f1, f2, f3;
  int i0;
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_mp_send_data", 1, s7_car(args), "a int"));
  i0=(int)s7_integer(s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_mp_send_data", 2, s7_car(args), "a double"));
  f0=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_mp_send_data", 3, s7_car(args), "a double"));
  f1=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_mp_send_data", 4, s7_car(args), "a double"));
  f2=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_mp_send_data", 5, s7_car(args), "a double"));
  f3=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  mp_send_data(i0, f0, f1, f2, f3);
  return s7_UNSPECIFIED(s7);
}

s7_pointer ffi_mp_set_channel_mask (s7_scheme *s7, s7_pointer args)
{
  int i0;
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_mp_set_channel_mask", 1, s7_car(args), "a int"));
  i0=(int)s7_integer(s7_car(args));
  args=s7_cdr(args);
  mp_set_channel_mask(i0);
  return s7_UNSPECIFIED(s7);
}

s7_pointer ffi_mp_set_message_mask (s7_scheme *s7, s7_pointer args)
{
  int i0;
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_mp_set_message_mask", 1, s7_car(args), "a int"));
  i0=(int)s7_integer(s7_car(args));
  args=s7_cdr(args);
  mp_set_message_mask(i0);
  return s7_UNSPECIFIED(s7);
}

s7_pointer ffi_mp_set_tuning (s7_scheme *s7, s7_pointer args)
{
  int i0;
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_mp_set_tuning", 1, s7_car(args), "a int"));
  i0=(int)s7_integer(s7_car(args));
  args=s7_cdr(args);
  mp_set_tuning(i0);
  return s7_UNSPECIFIED(s7);
}

s7_pointer ffi_mp_set_instruments (s7_scheme *s7, s7_pointer args)
{
  s7_pointer p0;
  if (!(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_mp_set_instruments", 1, s7_car(args), "a s7_pointer"));
  p0=s7_car(args);
  args=s7_cdr(args);
  mp_set_instruments(p0);
  return s7_UNSPECIFIED(s7);
}

s7_pointer ffi_mp_set_midi_hook (s7_scheme *s7, s7_pointer args)
{
  int i0;
  bool b0;
  s7_pointer p0;
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_mp_set_midi_hook", 1, s7_car(args), "a int"));
  i0=(int)s7_integer(s7_car(args));
  args=s7_cdr(args);
  if (!(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_mp_set_midi_hook", 2, s7_car(args), "a s7_pointer"));
  p0=s7_car(args);
  args=s7_cdr(args);
  b0=mp_set_midi_hook(i0, p0);
  return make_s7_boolean(s7, b0);
}

s7_pointer ffi_mp_is_midi_hook (s7_scheme *s7, s7_pointer args)
{
  int i0;
  s7_pointer p0;
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_mp_is_midi_hook", 1, s7_car(args), "a int"));
  i0=(int)s7_integer(s7_car(args));
  args=s7_cdr(args);
  p0=mp_is_midi_hook(i0);
  return p0;
}

s7_pointer ffi_cs_open_score (s7_scheme *s7, s7_pointer args)
{
  char* s0;
  if (!s7_is_string(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_cs_open_score", 1, s7_car(args), "a c-string"));
  s0=(char*)s7_string(s7_car(args));
  args=s7_cdr(args);
  cs_open_score(s0);
  return s7_UNSPECIFIED(s7);
}

s7_pointer ffi_cs_close_score (s7_scheme *s7, s7_pointer args)
{
  cs_close_score();
  return s7_UNSPECIFIED(s7);
}

s7_pointer ffi_cs_send_score (s7_scheme *s7, s7_pointer args)
{
  double f0;
  int i0, i1;
  char* s0;
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_cs_send_score", 1, s7_car(args), "a int"));
  i0=(int)s7_integer(s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_cs_send_score", 2, s7_car(args), "a int"));
  i1=(int)s7_integer(s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_cs_send_score", 3, s7_car(args), "a double"));
  f0=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_string(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_cs_send_score", 4, s7_car(args), "a c-string"));
  s0=(char*)s7_string(s7_car(args));
  args=s7_cdr(args);
  cs_send_score(i0, i1, f0, s0);
  return s7_UNSPECIFIED(s7);
}

s7_pointer ffi_fms_open_score (s7_scheme *s7, s7_pointer args)
{
  bool b0;
  if (!s7_is_boolean(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_fms_open_score", 1, s7_car(args), "a bool"));
  b0=s7_boolean(s7, s7_car(args));
  args=s7_cdr(args);
  fms_open_score(b0);
  return s7_UNSPECIFIED(s7);
}

s7_pointer ffi_fms_close_score (s7_scheme *s7, s7_pointer args)
{
  fms_close_score();
  return s7_UNSPECIFIED(s7);
}

s7_pointer ffi_fms_new (s7_scheme *s7, s7_pointer args)
{
  char* s0;
  if (!s7_is_string(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_fms_new", 1, s7_car(args), "a c-string"));
  s0=(char*)s7_string(s7_car(args));
  args=s7_cdr(args);
  fms_new(s0);
  return s7_UNSPECIFIED(s7);
}

s7_pointer ffi_fms_select (s7_scheme *s7, s7_pointer args)
{
  char* s0;
  if (!s7_is_string(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_fms_select", 1, s7_car(args), "a c-string"));
  s0=(char*)s7_string(s7_car(args));
  args=s7_cdr(args);
  fms_select(s0);
  return s7_UNSPECIFIED(s7);
}

s7_pointer ffi_fms_free (s7_scheme *s7, s7_pointer args)
{
  fms_free();
  return s7_UNSPECIFIED(s7);
}

s7_pointer ffi_fms_clear (s7_scheme *s7, s7_pointer args)
{
  bool b0;
  if (!s7_is_boolean(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_fms_clear", 1, s7_car(args), "a bool"));
  b0=s7_boolean(s7, s7_car(args));
  args=s7_cdr(args);
  fms_clear(b0);
  return s7_UNSPECIFIED(s7);
}

s7_pointer ffi_fms_load (s7_scheme *s7, s7_pointer args)
{
  char* s0;
  if (!s7_is_string(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_fms_load", 1, s7_car(args), "a c-string"));
  s0=(char*)s7_string(s7_car(args));
  args=s7_cdr(args);
  fms_load(s0);
  return s7_UNSPECIFIED(s7);
}

s7_pointer ffi_fms_run (s7_scheme *s7, s7_pointer args)
{
  fms_run();
  return s7_UNSPECIFIED(s7);
}

s7_pointer ffi_fms_save (s7_scheme *s7, s7_pointer args)
{
  char* s0;
  if (!s7_is_string(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_fms_save", 1, s7_car(args), "a c-string"));
  s0=(char*)s7_string(s7_car(args));
  args=s7_cdr(args);
  fms_save(s0);
  return s7_UNSPECIFIED(s7);
}

s7_pointer ffi_fms_save_as (s7_scheme *s7, s7_pointer args)
{
  char* s0;
  if (!s7_is_string(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_fms_save_as", 1, s7_car(args), "a c-string"));
  s0=(char*)s7_string(s7_car(args));
  args=s7_cdr(args);
  fms_save_as(s0);
  return s7_UNSPECIFIED(s7);
}

s7_pointer ffi_fms_isfiletype (s7_scheme *s7, s7_pointer args)
{
  int i0;
  char* s0;
  if (!s7_is_string(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_fms_isfiletype", 1, s7_car(args), "a c-string"));
  s0=(char*)s7_string(s7_car(args));
  args=s7_cdr(args);
  i0=fms_isfiletype(s0);
  return s7_make_integer(s7, i0);
}

s7_pointer ffi_fms_merge (s7_scheme *s7, s7_pointer args)
{
  double f0;
  long l0, l1;
  char* s0;
  if (!s7_is_string(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_fms_merge", 1, s7_car(args), "a c-string"));
  s0=(char*)s7_string(s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_fms_merge", 2, s7_car(args), "a long"));
  l0=(long)s7_integer(s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_fms_merge", 3, s7_car(args), "a long"));
  l1=(long)s7_integer(s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_fms_merge", 4, s7_car(args), "a double"));
  f0=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  fms_merge(s0, l0, l1, f0);
  return s7_UNSPECIFIED(s7);
}

s7_pointer ffi_fms_ival (s7_scheme *s7, s7_pointer args)
{
  int i0, i1;
  long l0;
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_fms_ival", 1, s7_car(args), "a int"));
  i0=(int)s7_integer(s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_fms_ival", 2, s7_car(args), "a int"));
  i1=(int)s7_integer(s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_fms_ival", 3, s7_car(args), "a long"));
  l0=(long)s7_integer(s7_car(args));
  args=s7_cdr(args);
  fms_ival(i0, i1, l0);
  return s7_UNSPECIFIED(s7);
}

s7_pointer ffi_fms_rval (s7_scheme *s7, s7_pointer args)
{
  int i0, i1;
  long l0, l1;
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_fms_rval", 1, s7_car(args), "a int"));
  i0=(int)s7_integer(s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_fms_rval", 2, s7_car(args), "a int"));
  i1=(int)s7_integer(s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_fms_rval", 3, s7_car(args), "a long"));
  l0=(long)s7_integer(s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_fms_rval", 4, s7_car(args), "a long"));
  l1=(long)s7_integer(s7_car(args));
  args=s7_cdr(args);
  fms_rval(i0, i1, l0, l1);
  return s7_UNSPECIFIED(s7);
}

s7_pointer ffi_fms_fval (s7_scheme *s7, s7_pointer args)
{
  double f0;
  int i0, i1;
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_fms_fval", 1, s7_car(args), "a int"));
  i0=(int)s7_integer(s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_fms_fval", 2, s7_car(args), "a int"));
  i1=(int)s7_integer(s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_fms_fval", 3, s7_car(args), "a double"));
  f0=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  fms_fval(i0, i1, f0);
  return s7_UNSPECIFIED(s7);
}

s7_pointer ffi_fms_sval (s7_scheme *s7, s7_pointer args)
{
  int i0, i1;
  char* s0;
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_fms_sval", 1, s7_car(args), "a int"));
  i0=(int)s7_integer(s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_fms_sval", 2, s7_car(args), "a int"));
  i1=(int)s7_integer(s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_string(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_fms_sval", 3, s7_car(args), "a c-string"));
  s0=(char*)s7_string(s7_car(args));
  args=s7_cdr(args);
  fms_sval(i0, i1, s0);
  return s7_UNSPECIFIED(s7);
}

s7_pointer ffi_fms_act (s7_scheme *s7, s7_pointer args)
{
  int i0, i1;
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_fms_act", 1, s7_car(args), "a int"));
  i0=(int)s7_integer(s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_fms_act", 2, s7_car(args), "a int"));
  i1=(int)s7_integer(s7_car(args));
  args=s7_cdr(args);
  fms_act(i0, i1);
  return s7_UNSPECIFIED(s7);
}

s7_pointer ffi_fms_err (s7_scheme *s7, s7_pointer args)
{
  fms_err();
  return s7_UNSPECIFIED(s7);
}

s7_pointer ffi_plot_xml (s7_scheme *s7, s7_pointer args)
{
  char* s0;
  if (!s7_is_string(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_plot_xml", 1, s7_car(args), "a c-string"));
  s0=(char*)s7_string(s7_car(args));
  args=s7_cdr(args);
  plot_xml(s0);
  return s7_UNSPECIFIED(s7);
}

s7_pointer ffi_plot_add_xml_points (s7_scheme *s7, s7_pointer args)
{
  char* s0; char* s1;
  if (!s7_is_string(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_plot_add_xml_points", 1, s7_car(args), "a c-string"));
  s0=(char*)s7_string(s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_string(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_plot_add_xml_points", 2, s7_car(args), "a c-string"));
  s1=(char*)s7_string(s7_car(args));
  args=s7_cdr(args);
  plot_add_xml_points(s0, s1);
  return s7_UNSPECIFIED(s7);
}

s7_pointer ffi_plot_data (s7_scheme *s7, s7_pointer args)
{
  int i0;
  char* s0; char* s1;
  if (!s7_is_string(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_plot_data", 1, s7_car(args), "a c-string"));
  s1=(char*)s7_string(s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_plot_data", 2, s7_car(args), "a int"));
  i0=(int)s7_integer(s7_car(args));
  args=s7_cdr(args);
  s0=plot_data(s1, i0);
  return strduped_string(s7, s0);
}

s7_pointer ffi_sw_open_from_xml (s7_scheme *s7, s7_pointer args)
{
  bool b0;
  char* s0;
  if (!s7_is_string(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_sw_open_from_xml", 1, s7_car(args), "a c-string"));
  s0=(char*)s7_string(s7_car(args));
  args=s7_cdr(args);
  b0=sw_open_from_xml(s0);
  return make_s7_boolean(s7, b0);
}

s7_pointer ffi_sw_draw (s7_scheme *s7, s7_pointer args)
{
  int i0, i1;
  char* s0;
  s7_pointer p0;
  if (!s7_is_string(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_sw_draw", 1, s7_car(args), "a c-string"));
  s0=(char*)s7_string(s7_car(args));
  args=s7_cdr(args);
  if (!(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_sw_draw", 2, s7_car(args), "a s7_pointer"));
  p0=s7_car(args);
  args=s7_cdr(args);
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_sw_draw", 3, s7_car(args), "a int"));
  i0=(int)s7_integer(s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_sw_draw", 4, s7_car(args), "a int"));
  i1=(int)s7_integer(s7_car(args));
  args=s7_cdr(args);
  sw_draw(s0, p0, i0, i1);
  return s7_UNSPECIFIED(s7);
}

s7_pointer ffi_osc_open_input (s7_scheme *s7, s7_pointer args)
{
  int i0;
  bool b0;
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_osc_open_input", 1, s7_car(args), "a int"));
  i0=(int)s7_integer(s7_car(args));
  args=s7_cdr(args);
  b0=osc_open_input(i0);
  return make_s7_boolean(s7, b0);
}

s7_pointer ffi_osc_close_input (s7_scheme *s7, s7_pointer args)
{
  bool b0;
  b0=osc_close_input();
  return make_s7_boolean(s7, b0);
}

s7_pointer ffi_osc_open_output (s7_scheme *s7, s7_pointer args)
{
  int i0;
  bool b0;
  char* s0;
  if (!s7_is_string(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_osc_open_output", 1, s7_car(args), "a c-string"));
  s0=(char*)s7_string(s7_car(args));
  args=s7_cdr(args);
  if (!s7_is_integer(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_osc_open_output", 2, s7_car(args), "a int"));
  i0=(int)s7_integer(s7_car(args));
  args=s7_cdr(args);
  b0=osc_open_output(s0, i0);
  return make_s7_boolean(s7, b0);
}

s7_pointer ffi_osc_close_output (s7_scheme *s7, s7_pointer args)
{
  bool b0;
  b0=osc_close_output();
  return make_s7_boolean(s7, b0);
}

s7_pointer ffi_osc_send_message (s7_scheme *s7, s7_pointer args)
{
  char* s0;
  s7_pointer p0;
  if (!s7_is_string(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_osc_send_message", 1, s7_car(args), "a c-string"));
  s0=(char*)s7_string(s7_car(args));
  args=s7_cdr(args);
  if (!(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_osc_send_message", 2, s7_car(args), "a s7_pointer"));
  p0=s7_car(args);
  args=s7_cdr(args);
  osc_send_message(s0, p0);
  return s7_UNSPECIFIED(s7);
}

s7_pointer ffi_osc_send_bundle (s7_scheme *s7, s7_pointer args)
{
  double f0;
  s7_pointer p0;
  if (!s7_is_real(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_osc_send_bundle", 1, s7_car(args), "a double"));
  f0=s7_number_to_real(s7,s7_car(args));
  args=s7_cdr(args);
  if (!(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_osc_send_bundle", 2, s7_car(args), "a s7_pointer"));
  p0=s7_car(args);
  args=s7_cdr(args);
  osc_send_bundle(f0, p0);
  return s7_UNSPECIFIED(s7);
}

s7_pointer ffi_osc_set_hook (s7_scheme *s7, s7_pointer args)
{
  char* s0;
  s7_pointer p0, p1;
  if (!s7_is_string(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_osc_set_hook", 1, s7_car(args), "a c-string"));
  s0=(char*)s7_string(s7_car(args));
  args=s7_cdr(args);
  if (!(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_osc_set_hook", 2, s7_car(args), "a s7_pointer"));
  p1=s7_car(args);
  args=s7_cdr(args);
  p0=osc_set_hook(s0, p1);
  return p0;
}

s7_pointer ffi_osc_is_hook (s7_scheme *s7, s7_pointer args)
{
  char* s0;
  s7_pointer p0;
  if (!s7_is_string(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_osc_is_hook", 1, s7_car(args), "a c-string"));
  s0=(char*)s7_string(s7_car(args));
  args=s7_cdr(args);
  p0=osc_is_hook(s0);
  return p0;
}

s7_pointer ffi_sdif_import (s7_scheme *s7, s7_pointer args)
{
  char* s0;
  s7_pointer p0, p1;
  if (!s7_is_string(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_sdif_import", 1, s7_car(args), "a c-string"));
  s0=(char*)s7_string(s7_car(args));
  args=s7_cdr(args);
  if (!(s7_car(args)))
    return(s7_wrong_type_arg_error(s7, "ffi_sdif_import", 2, s7_car(args), "a s7_pointer"));
  p1=s7_car(args);
  args=s7_cdr(args);
  p0=sdif_import(s0, p1);
  return p0;
}



// record definitions


static s7_int period_tag = 666;
typedef struct
{
  s7_pointer count;
  s7_pointer length;
  s7_pointer stream;
  s7_pointer cdefault;
  s7_pointer omit;
  s7_pointer reps;
} period;
static void cm_period_free(void *obj)
{
  period *f = (period *)obj;
  if (f) free(f);
}
static bool cm_period_equal(void *obj1, void *obj2)
{
  return (obj1 == obj2);
}
static void cm_period_mark(void *obj)
{
  period *f = (period *)obj;
  s7_mark_object(f->count);
  s7_mark_object(f->length);
  s7_mark_object(f->stream);
  s7_mark_object(f->cdefault);
  s7_mark_object(f->omit);
  s7_mark_object(f->reps);
}
static s7_pointer ffi_is_period(s7_scheme *s7, s7_pointer args)
{
  return make_s7_boolean(s7, ((s7_is_object(s7_car(args))) &&
                              (s7_object_type(s7_car(args)) == period_tag)));
}
static s7_pointer ffi_make_period(s7_scheme *s7, s7_pointer args)
{
  period *obj = (period *)malloc(sizeof(period));
  obj->count=s7_car(args);
  args=s7_cdr(args);
  obj->length=s7_car(args);
  args=s7_cdr(args);
  obj->stream=s7_car(args);
  args=s7_cdr(args);
  obj->cdefault=s7_car(args);
  args=s7_cdr(args);
  obj->omit=s7_car(args);
  args=s7_cdr(args);
  obj->reps=s7_car(args);
  args=s7_cdr(args);
  return s7_make_object(s7, period_tag, (void *)obj);
}
static s7_pointer ffi_get_period_count(s7_scheme *s7, s7_pointer args)
{
  period *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == period_tag)))
    return s7_wrong_type_arg_error(s7, "period-count", 1, s7_car(args), "a period");
  obj = (period *)s7_object_value(s7_car(args));
  return obj->count;
}
static s7_pointer ffi_set_period_count(s7_scheme *s7, s7_pointer args)
{
  period *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == period_tag)))
    return s7_wrong_type_arg_error(s7, "period-count-set!", 1, s7_car(args), "a period");
  obj = (period *)s7_object_value(s7_car(args));
  args=s7_cdr(args);
  obj->count=s7_car(args);
  return obj->count;
}
static s7_pointer ffi_get_period_length(s7_scheme *s7, s7_pointer args)
{
  period *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == period_tag)))
    return s7_wrong_type_arg_error(s7, "period-length", 1, s7_car(args), "a period");
  obj = (period *)s7_object_value(s7_car(args));
  return obj->length;
}
static s7_pointer ffi_set_period_length(s7_scheme *s7, s7_pointer args)
{
  period *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == period_tag)))
    return s7_wrong_type_arg_error(s7, "period-length-set!", 1, s7_car(args), "a period");
  obj = (period *)s7_object_value(s7_car(args));
  args=s7_cdr(args);
  obj->length=s7_car(args);
  return obj->length;
}
static s7_pointer ffi_get_period_stream(s7_scheme *s7, s7_pointer args)
{
  period *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == period_tag)))
    return s7_wrong_type_arg_error(s7, "period-stream", 1, s7_car(args), "a period");
  obj = (period *)s7_object_value(s7_car(args));
  return obj->stream;
}
static s7_pointer ffi_set_period_stream(s7_scheme *s7, s7_pointer args)
{
  period *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == period_tag)))
    return s7_wrong_type_arg_error(s7, "period-stream-set!", 1, s7_car(args), "a period");
  obj = (period *)s7_object_value(s7_car(args));
  args=s7_cdr(args);
  obj->stream=s7_car(args);
  return obj->stream;
}
static s7_pointer ffi_get_period_cdefault(s7_scheme *s7, s7_pointer args)
{
  period *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == period_tag)))
    return s7_wrong_type_arg_error(s7, "period-default", 1, s7_car(args), "a period");
  obj = (period *)s7_object_value(s7_car(args));
  return obj->cdefault;
}
static s7_pointer ffi_set_period_cdefault(s7_scheme *s7, s7_pointer args)
{
  period *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == period_tag)))
    return s7_wrong_type_arg_error(s7, "period-default-set!", 1, s7_car(args), "a period");
  obj = (period *)s7_object_value(s7_car(args));
  args=s7_cdr(args);
  obj->cdefault=s7_car(args);
  return obj->cdefault;
}
static s7_pointer ffi_get_period_omit(s7_scheme *s7, s7_pointer args)
{
  period *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == period_tag)))
    return s7_wrong_type_arg_error(s7, "period-omit", 1, s7_car(args), "a period");
  obj = (period *)s7_object_value(s7_car(args));
  return obj->omit;
}
static s7_pointer ffi_set_period_omit(s7_scheme *s7, s7_pointer args)
{
  period *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == period_tag)))
    return s7_wrong_type_arg_error(s7, "period-omit-set!", 1, s7_car(args), "a period");
  obj = (period *)s7_object_value(s7_car(args));
  args=s7_cdr(args);
  obj->omit=s7_car(args);
  return obj->omit;
}
static s7_pointer ffi_get_period_reps(s7_scheme *s7, s7_pointer args)
{
  period *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == period_tag)))
    return s7_wrong_type_arg_error(s7, "period-reps", 1, s7_car(args), "a period");
  obj = (period *)s7_object_value(s7_car(args));
  return obj->reps;
}
static s7_pointer ffi_set_period_reps(s7_scheme *s7, s7_pointer args)
{
  period *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == period_tag)))
    return s7_wrong_type_arg_error(s7, "period-reps-set!", 1, s7_car(args), "a period");
  obj = (period *)s7_object_value(s7_car(args));
  args=s7_cdr(args);
  obj->reps=s7_car(args);
  return obj->reps;
}
static s7_int pattern_tag = 667;
typedef struct
{
  s7_pointer flags;
  s7_pointer data;
  s7_pointer length;
  s7_pointer datum;
  s7_pointer period;
  s7_pointer value;
  s7_pointer state;
  s7_pointer repeat;
  s7_pointer returning;
  s7_pointer counting;
  s7_pointer traversing;
  s7_pointer next;
  s7_pointer mapr;
  s7_pointer cache;
} pattern;
static void cm_pattern_free(void *obj)
{
  pattern *f = (pattern *)obj;
  if (f) free(f);
}
static bool cm_pattern_equal(void *obj1, void *obj2)
{
  return (obj1 == obj2);
}
static void cm_pattern_mark(void *obj)
{
  pattern *f = (pattern *)obj;
  s7_mark_object(f->flags);
  s7_mark_object(f->data);
  s7_mark_object(f->length);
  s7_mark_object(f->datum);
  s7_mark_object(f->period);
  s7_mark_object(f->value);
  s7_mark_object(f->state);
  s7_mark_object(f->repeat);
  s7_mark_object(f->returning);
  s7_mark_object(f->counting);
  s7_mark_object(f->traversing);
  s7_mark_object(f->next);
  s7_mark_object(f->mapr);
  s7_mark_object(f->cache);
}
static s7_pointer ffi_is_pattern(s7_scheme *s7, s7_pointer args)
{
  return make_s7_boolean(s7, ((s7_is_object(s7_car(args))) &&
                              (s7_object_type(s7_car(args)) == pattern_tag)));
}
static s7_pointer ffi_make_pattern(s7_scheme *s7, s7_pointer args)
{
  pattern *obj = (pattern *)malloc(sizeof(pattern));
  obj->flags=s7_car(args);
  args=s7_cdr(args);
  obj->data=s7_car(args);
  args=s7_cdr(args);
  obj->length=s7_car(args);
  args=s7_cdr(args);
  obj->datum=s7_car(args);
  args=s7_cdr(args);
  obj->period=s7_car(args);
  args=s7_cdr(args);
  obj->value=s7_car(args);
  args=s7_cdr(args);
  obj->state=s7_car(args);
  args=s7_cdr(args);
  obj->repeat=s7_car(args);
  args=s7_cdr(args);
  obj->returning=s7_car(args);
  args=s7_cdr(args);
  obj->counting=s7_car(args);
  args=s7_cdr(args);
  obj->traversing=s7_car(args);
  args=s7_cdr(args);
  obj->next=s7_car(args);
  args=s7_cdr(args);
  obj->mapr=s7_car(args);
  args=s7_cdr(args);
  obj->cache=s7_car(args);
  args=s7_cdr(args);
  return s7_make_object(s7, pattern_tag, (void *)obj);
}
static s7_pointer ffi_get_pattern_flags(s7_scheme *s7, s7_pointer args)
{
  pattern *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == pattern_tag)))
    return s7_wrong_type_arg_error(s7, "pattern-flags", 1, s7_car(args), "a pattern");
  obj = (pattern *)s7_object_value(s7_car(args));
  return obj->flags;
}
static s7_pointer ffi_set_pattern_flags(s7_scheme *s7, s7_pointer args)
{
  pattern *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == pattern_tag)))
    return s7_wrong_type_arg_error(s7, "pattern-flags-set!", 1, s7_car(args), "a pattern");
  obj = (pattern *)s7_object_value(s7_car(args));
  args=s7_cdr(args);
  obj->flags=s7_car(args);
  return obj->flags;
}
static s7_pointer ffi_get_pattern_data(s7_scheme *s7, s7_pointer args)
{
  pattern *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == pattern_tag)))
    return s7_wrong_type_arg_error(s7, "pattern-data", 1, s7_car(args), "a pattern");
  obj = (pattern *)s7_object_value(s7_car(args));
  return obj->data;
}
static s7_pointer ffi_set_pattern_data(s7_scheme *s7, s7_pointer args)
{
  pattern *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == pattern_tag)))
    return s7_wrong_type_arg_error(s7, "pattern-data-set!", 1, s7_car(args), "a pattern");
  obj = (pattern *)s7_object_value(s7_car(args));
  args=s7_cdr(args);
  obj->data=s7_car(args);
  return obj->data;
}
static s7_pointer ffi_get_pattern_length(s7_scheme *s7, s7_pointer args)
{
  pattern *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == pattern_tag)))
    return s7_wrong_type_arg_error(s7, "pattern-length", 1, s7_car(args), "a pattern");
  obj = (pattern *)s7_object_value(s7_car(args));
  return obj->length;
}
static s7_pointer ffi_set_pattern_length(s7_scheme *s7, s7_pointer args)
{
  pattern *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == pattern_tag)))
    return s7_wrong_type_arg_error(s7, "pattern-length-set!", 1, s7_car(args), "a pattern");
  obj = (pattern *)s7_object_value(s7_car(args));
  args=s7_cdr(args);
  obj->length=s7_car(args);
  return obj->length;
}
static s7_pointer ffi_get_pattern_datum(s7_scheme *s7, s7_pointer args)
{
  pattern *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == pattern_tag)))
    return s7_wrong_type_arg_error(s7, "pattern-datum", 1, s7_car(args), "a pattern");
  obj = (pattern *)s7_object_value(s7_car(args));
  return obj->datum;
}
static s7_pointer ffi_set_pattern_datum(s7_scheme *s7, s7_pointer args)
{
  pattern *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == pattern_tag)))
    return s7_wrong_type_arg_error(s7, "pattern-datum-set!", 1, s7_car(args), "a pattern");
  obj = (pattern *)s7_object_value(s7_car(args));
  args=s7_cdr(args);
  obj->datum=s7_car(args);
  return obj->datum;
}
static s7_pointer ffi_get_pattern_period(s7_scheme *s7, s7_pointer args)
{
  pattern *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == pattern_tag)))
    return s7_wrong_type_arg_error(s7, "pattern-period", 1, s7_car(args), "a pattern");
  obj = (pattern *)s7_object_value(s7_car(args));
  return obj->period;
}
static s7_pointer ffi_set_pattern_period(s7_scheme *s7, s7_pointer args)
{
  pattern *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == pattern_tag)))
    return s7_wrong_type_arg_error(s7, "pattern-period-set!", 1, s7_car(args), "a pattern");
  obj = (pattern *)s7_object_value(s7_car(args));
  args=s7_cdr(args);
  obj->period=s7_car(args);
  return obj->period;
}
static s7_pointer ffi_get_pattern_value(s7_scheme *s7, s7_pointer args)
{
  pattern *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == pattern_tag)))
    return s7_wrong_type_arg_error(s7, "pattern-value", 1, s7_car(args), "a pattern");
  obj = (pattern *)s7_object_value(s7_car(args));
  return obj->value;
}
static s7_pointer ffi_set_pattern_value(s7_scheme *s7, s7_pointer args)
{
  pattern *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == pattern_tag)))
    return s7_wrong_type_arg_error(s7, "pattern-value-set!", 1, s7_car(args), "a pattern");
  obj = (pattern *)s7_object_value(s7_car(args));
  args=s7_cdr(args);
  obj->value=s7_car(args);
  return obj->value;
}
static s7_pointer ffi_get_pattern_state(s7_scheme *s7, s7_pointer args)
{
  pattern *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == pattern_tag)))
    return s7_wrong_type_arg_error(s7, "pattern-state", 1, s7_car(args), "a pattern");
  obj = (pattern *)s7_object_value(s7_car(args));
  return obj->state;
}
static s7_pointer ffi_set_pattern_state(s7_scheme *s7, s7_pointer args)
{
  pattern *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == pattern_tag)))
    return s7_wrong_type_arg_error(s7, "pattern-state-set!", 1, s7_car(args), "a pattern");
  obj = (pattern *)s7_object_value(s7_car(args));
  args=s7_cdr(args);
  obj->state=s7_car(args);
  return obj->state;
}
static s7_pointer ffi_get_pattern_repeat(s7_scheme *s7, s7_pointer args)
{
  pattern *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == pattern_tag)))
    return s7_wrong_type_arg_error(s7, "pattern-repeat", 1, s7_car(args), "a pattern");
  obj = (pattern *)s7_object_value(s7_car(args));
  return obj->repeat;
}
static s7_pointer ffi_set_pattern_repeat(s7_scheme *s7, s7_pointer args)
{
  pattern *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == pattern_tag)))
    return s7_wrong_type_arg_error(s7, "pattern-repeat-set!", 1, s7_car(args), "a pattern");
  obj = (pattern *)s7_object_value(s7_car(args));
  args=s7_cdr(args);
  obj->repeat=s7_car(args);
  return obj->repeat;
}
static s7_pointer ffi_get_pattern_returning(s7_scheme *s7, s7_pointer args)
{
  pattern *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == pattern_tag)))
    return s7_wrong_type_arg_error(s7, "pattern-returning", 1, s7_car(args), "a pattern");
  obj = (pattern *)s7_object_value(s7_car(args));
  return obj->returning;
}
static s7_pointer ffi_set_pattern_returning(s7_scheme *s7, s7_pointer args)
{
  pattern *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == pattern_tag)))
    return s7_wrong_type_arg_error(s7, "pattern-returning-set!", 1, s7_car(args), "a pattern");
  obj = (pattern *)s7_object_value(s7_car(args));
  args=s7_cdr(args);
  obj->returning=s7_car(args);
  return obj->returning;
}
static s7_pointer ffi_get_pattern_counting(s7_scheme *s7, s7_pointer args)
{
  pattern *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == pattern_tag)))
    return s7_wrong_type_arg_error(s7, "pattern-counting", 1, s7_car(args), "a pattern");
  obj = (pattern *)s7_object_value(s7_car(args));
  return obj->counting;
}
static s7_pointer ffi_set_pattern_counting(s7_scheme *s7, s7_pointer args)
{
  pattern *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == pattern_tag)))
    return s7_wrong_type_arg_error(s7, "pattern-counting-set!", 1, s7_car(args), "a pattern");
  obj = (pattern *)s7_object_value(s7_car(args));
  args=s7_cdr(args);
  obj->counting=s7_car(args);
  return obj->counting;
}
static s7_pointer ffi_get_pattern_traversing(s7_scheme *s7, s7_pointer args)
{
  pattern *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == pattern_tag)))
    return s7_wrong_type_arg_error(s7, "pattern-traversing", 1, s7_car(args), "a pattern");
  obj = (pattern *)s7_object_value(s7_car(args));
  return obj->traversing;
}
static s7_pointer ffi_set_pattern_traversing(s7_scheme *s7, s7_pointer args)
{
  pattern *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == pattern_tag)))
    return s7_wrong_type_arg_error(s7, "pattern-traversing-set!", 1, s7_car(args), "a pattern");
  obj = (pattern *)s7_object_value(s7_car(args));
  args=s7_cdr(args);
  obj->traversing=s7_car(args);
  return obj->traversing;
}
static s7_pointer ffi_get_pattern_next(s7_scheme *s7, s7_pointer args)
{
  pattern *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == pattern_tag)))
    return s7_wrong_type_arg_error(s7, "pattern-next", 1, s7_car(args), "a pattern");
  obj = (pattern *)s7_object_value(s7_car(args));
  return obj->next;
}
static s7_pointer ffi_set_pattern_next(s7_scheme *s7, s7_pointer args)
{
  pattern *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == pattern_tag)))
    return s7_wrong_type_arg_error(s7, "pattern-next-set!", 1, s7_car(args), "a pattern");
  obj = (pattern *)s7_object_value(s7_car(args));
  args=s7_cdr(args);
  obj->next=s7_car(args);
  return obj->next;
}
static s7_pointer ffi_get_pattern_mapr(s7_scheme *s7, s7_pointer args)
{
  pattern *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == pattern_tag)))
    return s7_wrong_type_arg_error(s7, "pattern-mapr", 1, s7_car(args), "a pattern");
  obj = (pattern *)s7_object_value(s7_car(args));
  return obj->mapr;
}
static s7_pointer ffi_set_pattern_mapr(s7_scheme *s7, s7_pointer args)
{
  pattern *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == pattern_tag)))
    return s7_wrong_type_arg_error(s7, "pattern-mapr-set!", 1, s7_car(args), "a pattern");
  obj = (pattern *)s7_object_value(s7_car(args));
  args=s7_cdr(args);
  obj->mapr=s7_car(args);
  return obj->mapr;
}
static s7_pointer ffi_get_pattern_cache(s7_scheme *s7, s7_pointer args)
{
  pattern *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == pattern_tag)))
    return s7_wrong_type_arg_error(s7, "pattern-cache", 1, s7_car(args), "a pattern");
  obj = (pattern *)s7_object_value(s7_car(args));
  return obj->cache;
}
static s7_pointer ffi_set_pattern_cache(s7_scheme *s7, s7_pointer args)
{
  pattern *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == pattern_tag)))
    return s7_wrong_type_arg_error(s7, "pattern-cache-set!", 1, s7_car(args), "a pattern");
  obj = (pattern *)s7_object_value(s7_car(args));
  args=s7_cdr(args);
  obj->cache=s7_car(args);
  return obj->cache;
}
static s7_int palin_tag = 668;
typedef struct
{
  s7_pointer pos;
  s7_pointer len;
  s7_pointer inc;
  s7_pointer mode;
  s7_pointer elide;
} palin;
static void cm_palin_free(void *obj)
{
  palin *f = (palin *)obj;
  if (f) free(f);
}
static bool cm_palin_equal(void *obj1, void *obj2)
{
  return (obj1 == obj2);
}
static void cm_palin_mark(void *obj)
{
  palin *f = (palin *)obj;
  s7_mark_object(f->pos);
  s7_mark_object(f->len);
  s7_mark_object(f->inc);
  s7_mark_object(f->mode);
  s7_mark_object(f->elide);
}
static s7_pointer ffi_is_palin(s7_scheme *s7, s7_pointer args)
{
  return make_s7_boolean(s7, ((s7_is_object(s7_car(args))) &&
                              (s7_object_type(s7_car(args)) == palin_tag)));
}
static s7_pointer ffi_make_palin(s7_scheme *s7, s7_pointer args)
{
  palin *obj = (palin *)malloc(sizeof(palin));
  obj->pos=s7_car(args);
  args=s7_cdr(args);
  obj->len=s7_car(args);
  args=s7_cdr(args);
  obj->inc=s7_car(args);
  args=s7_cdr(args);
  obj->mode=s7_car(args);
  args=s7_cdr(args);
  obj->elide=s7_car(args);
  args=s7_cdr(args);
  return s7_make_object(s7, palin_tag, (void *)obj);
}
static s7_pointer ffi_get_palin_pos(s7_scheme *s7, s7_pointer args)
{
  palin *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == palin_tag)))
    return s7_wrong_type_arg_error(s7, "palin-pos", 1, s7_car(args), "a palin");
  obj = (palin *)s7_object_value(s7_car(args));
  return obj->pos;
}
static s7_pointer ffi_set_palin_pos(s7_scheme *s7, s7_pointer args)
{
  palin *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == palin_tag)))
    return s7_wrong_type_arg_error(s7, "palin-pos-set!", 1, s7_car(args), "a palin");
  obj = (palin *)s7_object_value(s7_car(args));
  args=s7_cdr(args);
  obj->pos=s7_car(args);
  return obj->pos;
}
static s7_pointer ffi_get_palin_len(s7_scheme *s7, s7_pointer args)
{
  palin *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == palin_tag)))
    return s7_wrong_type_arg_error(s7, "palin-len", 1, s7_car(args), "a palin");
  obj = (palin *)s7_object_value(s7_car(args));
  return obj->len;
}
static s7_pointer ffi_set_palin_len(s7_scheme *s7, s7_pointer args)
{
  palin *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == palin_tag)))
    return s7_wrong_type_arg_error(s7, "palin-len-set!", 1, s7_car(args), "a palin");
  obj = (palin *)s7_object_value(s7_car(args));
  args=s7_cdr(args);
  obj->len=s7_car(args);
  return obj->len;
}
static s7_pointer ffi_get_palin_inc(s7_scheme *s7, s7_pointer args)
{
  palin *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == palin_tag)))
    return s7_wrong_type_arg_error(s7, "palin-inc", 1, s7_car(args), "a palin");
  obj = (palin *)s7_object_value(s7_car(args));
  return obj->inc;
}
static s7_pointer ffi_set_palin_inc(s7_scheme *s7, s7_pointer args)
{
  palin *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == palin_tag)))
    return s7_wrong_type_arg_error(s7, "palin-inc-set!", 1, s7_car(args), "a palin");
  obj = (palin *)s7_object_value(s7_car(args));
  args=s7_cdr(args);
  obj->inc=s7_car(args);
  return obj->inc;
}
static s7_pointer ffi_get_palin_mode(s7_scheme *s7, s7_pointer args)
{
  palin *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == palin_tag)))
    return s7_wrong_type_arg_error(s7, "palin-mode", 1, s7_car(args), "a palin");
  obj = (palin *)s7_object_value(s7_car(args));
  return obj->mode;
}
static s7_pointer ffi_set_palin_mode(s7_scheme *s7, s7_pointer args)
{
  palin *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == palin_tag)))
    return s7_wrong_type_arg_error(s7, "palin-mode-set!", 1, s7_car(args), "a palin");
  obj = (palin *)s7_object_value(s7_car(args));
  args=s7_cdr(args);
  obj->mode=s7_car(args);
  return obj->mode;
}
static s7_pointer ffi_get_palin_elide(s7_scheme *s7, s7_pointer args)
{
  palin *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == palin_tag)))
    return s7_wrong_type_arg_error(s7, "palin-elide", 1, s7_car(args), "a palin");
  obj = (palin *)s7_object_value(s7_car(args));
  return obj->elide;
}
static s7_pointer ffi_set_palin_elide(s7_scheme *s7, s7_pointer args)
{
  palin *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == palin_tag)))
    return s7_wrong_type_arg_error(s7, "palin-elide-set!", 1, s7_car(args), "a palin");
  obj = (palin *)s7_object_value(s7_car(args));
  args=s7_cdr(args);
  obj->elide=s7_car(args);
  return obj->elide;
}
static s7_int random_item_tag = 669;
typedef struct
{
  s7_pointer datum;
  s7_pointer index;
  s7_pointer weight;
  s7_pointer min;
  s7_pointer max;
  s7_pointer count;
  s7_pointer id;
  s7_pointer minmax;
} random_item;
static void cm_random_item_free(void *obj)
{
  random_item *f = (random_item *)obj;
  if (f) free(f);
}
static bool cm_random_item_equal(void *obj1, void *obj2)
{
  return (obj1 == obj2);
}
static void cm_random_item_mark(void *obj)
{
  random_item *f = (random_item *)obj;
  s7_mark_object(f->datum);
  s7_mark_object(f->index);
  s7_mark_object(f->weight);
  s7_mark_object(f->min);
  s7_mark_object(f->max);
  s7_mark_object(f->count);
  s7_mark_object(f->id);
  s7_mark_object(f->minmax);
}
static s7_pointer ffi_is_random_item(s7_scheme *s7, s7_pointer args)
{
  return make_s7_boolean(s7, ((s7_is_object(s7_car(args))) &&
                              (s7_object_type(s7_car(args)) == random_item_tag)));
}
static s7_pointer ffi_make_random_item(s7_scheme *s7, s7_pointer args)
{
  random_item *obj = (random_item *)malloc(sizeof(random_item));
  obj->datum=s7_car(args);
  args=s7_cdr(args);
  obj->index=s7_car(args);
  args=s7_cdr(args);
  obj->weight=s7_car(args);
  args=s7_cdr(args);
  obj->min=s7_car(args);
  args=s7_cdr(args);
  obj->max=s7_car(args);
  args=s7_cdr(args);
  obj->count=s7_car(args);
  args=s7_cdr(args);
  obj->id=s7_car(args);
  args=s7_cdr(args);
  obj->minmax=s7_car(args);
  args=s7_cdr(args);
  return s7_make_object(s7, random_item_tag, (void *)obj);
}
static s7_pointer ffi_get_random_item_datum(s7_scheme *s7, s7_pointer args)
{
  random_item *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == random_item_tag)))
    return s7_wrong_type_arg_error(s7, "random-item-datum", 1, s7_car(args), "a random-item");
  obj = (random_item *)s7_object_value(s7_car(args));
  return obj->datum;
}
static s7_pointer ffi_set_random_item_datum(s7_scheme *s7, s7_pointer args)
{
  random_item *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == random_item_tag)))
    return s7_wrong_type_arg_error(s7, "random-item-datum-set!", 1, s7_car(args), "a random-item");
  obj = (random_item *)s7_object_value(s7_car(args));
  args=s7_cdr(args);
  obj->datum=s7_car(args);
  return obj->datum;
}
static s7_pointer ffi_get_random_item_index(s7_scheme *s7, s7_pointer args)
{
  random_item *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == random_item_tag)))
    return s7_wrong_type_arg_error(s7, "random-item-index", 1, s7_car(args), "a random-item");
  obj = (random_item *)s7_object_value(s7_car(args));
  return obj->index;
}
static s7_pointer ffi_set_random_item_index(s7_scheme *s7, s7_pointer args)
{
  random_item *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == random_item_tag)))
    return s7_wrong_type_arg_error(s7, "random-item-index-set!", 1, s7_car(args), "a random-item");
  obj = (random_item *)s7_object_value(s7_car(args));
  args=s7_cdr(args);
  obj->index=s7_car(args);
  return obj->index;
}
static s7_pointer ffi_get_random_item_weight(s7_scheme *s7, s7_pointer args)
{
  random_item *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == random_item_tag)))
    return s7_wrong_type_arg_error(s7, "random-item-weight", 1, s7_car(args), "a random-item");
  obj = (random_item *)s7_object_value(s7_car(args));
  return obj->weight;
}
static s7_pointer ffi_set_random_item_weight(s7_scheme *s7, s7_pointer args)
{
  random_item *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == random_item_tag)))
    return s7_wrong_type_arg_error(s7, "random-item-weight-set!", 1, s7_car(args), "a random-item");
  obj = (random_item *)s7_object_value(s7_car(args));
  args=s7_cdr(args);
  obj->weight=s7_car(args);
  return obj->weight;
}
static s7_pointer ffi_get_random_item_min(s7_scheme *s7, s7_pointer args)
{
  random_item *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == random_item_tag)))
    return s7_wrong_type_arg_error(s7, "random-item-min", 1, s7_car(args), "a random-item");
  obj = (random_item *)s7_object_value(s7_car(args));
  return obj->min;
}
static s7_pointer ffi_set_random_item_min(s7_scheme *s7, s7_pointer args)
{
  random_item *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == random_item_tag)))
    return s7_wrong_type_arg_error(s7, "random-item-min-set!", 1, s7_car(args), "a random-item");
  obj = (random_item *)s7_object_value(s7_car(args));
  args=s7_cdr(args);
  obj->min=s7_car(args);
  return obj->min;
}
static s7_pointer ffi_get_random_item_max(s7_scheme *s7, s7_pointer args)
{
  random_item *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == random_item_tag)))
    return s7_wrong_type_arg_error(s7, "random-item-max", 1, s7_car(args), "a random-item");
  obj = (random_item *)s7_object_value(s7_car(args));
  return obj->max;
}
static s7_pointer ffi_set_random_item_max(s7_scheme *s7, s7_pointer args)
{
  random_item *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == random_item_tag)))
    return s7_wrong_type_arg_error(s7, "random-item-max-set!", 1, s7_car(args), "a random-item");
  obj = (random_item *)s7_object_value(s7_car(args));
  args=s7_cdr(args);
  obj->max=s7_car(args);
  return obj->max;
}
static s7_pointer ffi_get_random_item_count(s7_scheme *s7, s7_pointer args)
{
  random_item *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == random_item_tag)))
    return s7_wrong_type_arg_error(s7, "random-item-count", 1, s7_car(args), "a random-item");
  obj = (random_item *)s7_object_value(s7_car(args));
  return obj->count;
}
static s7_pointer ffi_set_random_item_count(s7_scheme *s7, s7_pointer args)
{
  random_item *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == random_item_tag)))
    return s7_wrong_type_arg_error(s7, "random-item-count-set!", 1, s7_car(args), "a random-item");
  obj = (random_item *)s7_object_value(s7_car(args));
  args=s7_cdr(args);
  obj->count=s7_car(args);
  return obj->count;
}
static s7_pointer ffi_get_random_item_id(s7_scheme *s7, s7_pointer args)
{
  random_item *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == random_item_tag)))
    return s7_wrong_type_arg_error(s7, "random-item-id", 1, s7_car(args), "a random-item");
  obj = (random_item *)s7_object_value(s7_car(args));
  return obj->id;
}
static s7_pointer ffi_set_random_item_id(s7_scheme *s7, s7_pointer args)
{
  random_item *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == random_item_tag)))
    return s7_wrong_type_arg_error(s7, "random-item-id-set!", 1, s7_car(args), "a random-item");
  obj = (random_item *)s7_object_value(s7_car(args));
  args=s7_cdr(args);
  obj->id=s7_car(args);
  return obj->id;
}
static s7_pointer ffi_get_random_item_minmax(s7_scheme *s7, s7_pointer args)
{
  random_item *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == random_item_tag)))
    return s7_wrong_type_arg_error(s7, "random-item-minmax", 1, s7_car(args), "a random-item");
  obj = (random_item *)s7_object_value(s7_car(args));
  return obj->minmax;
}
static s7_pointer ffi_set_random_item_minmax(s7_scheme *s7, s7_pointer args)
{
  random_item *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == random_item_tag)))
    return s7_wrong_type_arg_error(s7, "random-item-minmax-set!", 1, s7_car(args), "a random-item");
  obj = (random_item *)s7_object_value(s7_car(args));
  args=s7_cdr(args);
  obj->minmax=s7_car(args);
  return obj->minmax;
}
static s7_int graph_node_tag = 670;
typedef struct
{
  s7_pointer datum;
  s7_pointer to;
  s7_pointer id;
} graph_node;
static void cm_graph_node_free(void *obj)
{
  graph_node *f = (graph_node *)obj;
  if (f) free(f);
}
static bool cm_graph_node_equal(void *obj1, void *obj2)
{
  return (obj1 == obj2);
}
static void cm_graph_node_mark(void *obj)
{
  graph_node *f = (graph_node *)obj;
  s7_mark_object(f->datum);
  s7_mark_object(f->to);
  s7_mark_object(f->id);
}
static s7_pointer ffi_is_graph_node(s7_scheme *s7, s7_pointer args)
{
  return make_s7_boolean(s7, ((s7_is_object(s7_car(args))) &&
                              (s7_object_type(s7_car(args)) == graph_node_tag)));
}
static s7_pointer ffi_make_graph_node(s7_scheme *s7, s7_pointer args)
{
  graph_node *obj = (graph_node *)malloc(sizeof(graph_node));
  obj->datum=s7_car(args);
  args=s7_cdr(args);
  obj->to=s7_car(args);
  args=s7_cdr(args);
  obj->id=s7_car(args);
  args=s7_cdr(args);
  return s7_make_object(s7, graph_node_tag, (void *)obj);
}
static s7_pointer ffi_get_graph_node_datum(s7_scheme *s7, s7_pointer args)
{
  graph_node *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == graph_node_tag)))
    return s7_wrong_type_arg_error(s7, "graph-node-datum", 1, s7_car(args), "a graph-node");
  obj = (graph_node *)s7_object_value(s7_car(args));
  return obj->datum;
}
static s7_pointer ffi_set_graph_node_datum(s7_scheme *s7, s7_pointer args)
{
  graph_node *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == graph_node_tag)))
    return s7_wrong_type_arg_error(s7, "graph-node-datum-set!", 1, s7_car(args), "a graph-node");
  obj = (graph_node *)s7_object_value(s7_car(args));
  args=s7_cdr(args);
  obj->datum=s7_car(args);
  return obj->datum;
}
static s7_pointer ffi_get_graph_node_to(s7_scheme *s7, s7_pointer args)
{
  graph_node *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == graph_node_tag)))
    return s7_wrong_type_arg_error(s7, "graph-node-to", 1, s7_car(args), "a graph-node");
  obj = (graph_node *)s7_object_value(s7_car(args));
  return obj->to;
}
static s7_pointer ffi_set_graph_node_to(s7_scheme *s7, s7_pointer args)
{
  graph_node *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == graph_node_tag)))
    return s7_wrong_type_arg_error(s7, "graph-node-to-set!", 1, s7_car(args), "a graph-node");
  obj = (graph_node *)s7_object_value(s7_car(args));
  args=s7_cdr(args);
  obj->to=s7_car(args);
  return obj->to;
}
static s7_pointer ffi_get_graph_node_id(s7_scheme *s7, s7_pointer args)
{
  graph_node *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == graph_node_tag)))
    return s7_wrong_type_arg_error(s7, "graph-node-id", 1, s7_car(args), "a graph-node");
  obj = (graph_node *)s7_object_value(s7_car(args));
  return obj->id;
}
static s7_pointer ffi_set_graph_node_id(s7_scheme *s7, s7_pointer args)
{
  graph_node *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == graph_node_tag)))
    return s7_wrong_type_arg_error(s7, "graph-node-id-set!", 1, s7_car(args), "a graph-node");
  obj = (graph_node *)s7_object_value(s7_car(args));
  args=s7_cdr(args);
  obj->id=s7_car(args);
  return obj->id;
}
static s7_int rule_tag = 671;
typedef struct
{
  s7_pointer name;
  s7_pointer type;
  s7_pointer pattern;
  s7_pointer parser;
  s7_pointer emiter;
} rule;
static void cm_rule_free(void *obj)
{
  rule *f = (rule *)obj;
  if (f) free(f);
}
static bool cm_rule_equal(void *obj1, void *obj2)
{
  return (obj1 == obj2);
}
static void cm_rule_mark(void *obj)
{
  rule *f = (rule *)obj;
  s7_mark_object(f->name);
  s7_mark_object(f->type);
  s7_mark_object(f->pattern);
  s7_mark_object(f->parser);
  s7_mark_object(f->emiter);
}
static s7_pointer ffi_is_rule(s7_scheme *s7, s7_pointer args)
{
  return make_s7_boolean(s7, ((s7_is_object(s7_car(args))) &&
                              (s7_object_type(s7_car(args)) == rule_tag)));
}
static s7_pointer ffi_make_rule(s7_scheme *s7, s7_pointer args)
{
  rule *obj = (rule *)malloc(sizeof(rule));
  obj->name=s7_car(args);
  args=s7_cdr(args);
  obj->type=s7_car(args);
  args=s7_cdr(args);
  obj->pattern=s7_car(args);
  args=s7_cdr(args);
  obj->parser=s7_car(args);
  args=s7_cdr(args);
  obj->emiter=s7_car(args);
  args=s7_cdr(args);
  return s7_make_object(s7, rule_tag, (void *)obj);
}
static s7_pointer ffi_get_rule_name(s7_scheme *s7, s7_pointer args)
{
  rule *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == rule_tag)))
    return s7_wrong_type_arg_error(s7, "rule-name", 1, s7_car(args), "a rule");
  obj = (rule *)s7_object_value(s7_car(args));
  return obj->name;
}
static s7_pointer ffi_set_rule_name(s7_scheme *s7, s7_pointer args)
{
  rule *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == rule_tag)))
    return s7_wrong_type_arg_error(s7, "rule-name-set!", 1, s7_car(args), "a rule");
  obj = (rule *)s7_object_value(s7_car(args));
  args=s7_cdr(args);
  obj->name=s7_car(args);
  return obj->name;
}
static s7_pointer ffi_get_rule_type(s7_scheme *s7, s7_pointer args)
{
  rule *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == rule_tag)))
    return s7_wrong_type_arg_error(s7, "rule-type", 1, s7_car(args), "a rule");
  obj = (rule *)s7_object_value(s7_car(args));
  return obj->type;
}
static s7_pointer ffi_set_rule_type(s7_scheme *s7, s7_pointer args)
{
  rule *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == rule_tag)))
    return s7_wrong_type_arg_error(s7, "rule-type-set!", 1, s7_car(args), "a rule");
  obj = (rule *)s7_object_value(s7_car(args));
  args=s7_cdr(args);
  obj->type=s7_car(args);
  return obj->type;
}
static s7_pointer ffi_get_rule_pattern(s7_scheme *s7, s7_pointer args)
{
  rule *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == rule_tag)))
    return s7_wrong_type_arg_error(s7, "rule-pattern", 1, s7_car(args), "a rule");
  obj = (rule *)s7_object_value(s7_car(args));
  return obj->pattern;
}
static s7_pointer ffi_set_rule_pattern(s7_scheme *s7, s7_pointer args)
{
  rule *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == rule_tag)))
    return s7_wrong_type_arg_error(s7, "rule-pattern-set!", 1, s7_car(args), "a rule");
  obj = (rule *)s7_object_value(s7_car(args));
  args=s7_cdr(args);
  obj->pattern=s7_car(args);
  return obj->pattern;
}
static s7_pointer ffi_get_rule_parser(s7_scheme *s7, s7_pointer args)
{
  rule *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == rule_tag)))
    return s7_wrong_type_arg_error(s7, "rule-parser", 1, s7_car(args), "a rule");
  obj = (rule *)s7_object_value(s7_car(args));
  return obj->parser;
}
static s7_pointer ffi_set_rule_parser(s7_scheme *s7, s7_pointer args)
{
  rule *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == rule_tag)))
    return s7_wrong_type_arg_error(s7, "rule-parser-set!", 1, s7_car(args), "a rule");
  obj = (rule *)s7_object_value(s7_car(args));
  args=s7_cdr(args);
  obj->parser=s7_car(args);
  return obj->parser;
}
static s7_pointer ffi_get_rule_emiter(s7_scheme *s7, s7_pointer args)
{
  rule *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == rule_tag)))
    return s7_wrong_type_arg_error(s7, "rule-emiter", 1, s7_car(args), "a rule");
  obj = (rule *)s7_object_value(s7_car(args));
  return obj->emiter;
}
static s7_pointer ffi_set_rule_emiter(s7_scheme *s7, s7_pointer args)
{
  rule *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == rule_tag)))
    return s7_wrong_type_arg_error(s7, "rule-emiter-set!", 1, s7_car(args), "a rule");
  obj = (rule *)s7_object_value(s7_car(args));
  args=s7_cdr(args);
  obj->emiter=s7_car(args);
  return obj->emiter;
}
static s7_int parse_error_tag = 672;
typedef struct
{
  s7_pointer string;
  s7_pointer position;
} parse_error;
static void cm_parse_error_free(void *obj)
{
  parse_error *f = (parse_error *)obj;
  if (f) free(f);
}
static bool cm_parse_error_equal(void *obj1, void *obj2)
{
  return (obj1 == obj2);
}
static void cm_parse_error_mark(void *obj)
{
  parse_error *f = (parse_error *)obj;
  s7_mark_object(f->string);
  s7_mark_object(f->position);
}
static s7_pointer ffi_is_parse_error(s7_scheme *s7, s7_pointer args)
{
  return make_s7_boolean(s7, ((s7_is_object(s7_car(args))) &&
                              (s7_object_type(s7_car(args)) == parse_error_tag)));
}
static s7_pointer ffi_make_parse_error(s7_scheme *s7, s7_pointer args)
{
  parse_error *obj = (parse_error *)malloc(sizeof(parse_error));
  obj->string=s7_car(args);
  args=s7_cdr(args);
  obj->position=s7_car(args);
  args=s7_cdr(args);
  return s7_make_object(s7, parse_error_tag, (void *)obj);
}
static s7_pointer ffi_get_parse_error_string(s7_scheme *s7, s7_pointer args)
{
  parse_error *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == parse_error_tag)))
    return s7_wrong_type_arg_error(s7, "parse-error-string", 1, s7_car(args), "a parse-error");
  obj = (parse_error *)s7_object_value(s7_car(args));
  return obj->string;
}
static s7_pointer ffi_set_parse_error_string(s7_scheme *s7, s7_pointer args)
{
  parse_error *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == parse_error_tag)))
    return s7_wrong_type_arg_error(s7, "parse-error-string-set!", 1, s7_car(args), "a parse-error");
  obj = (parse_error *)s7_object_value(s7_car(args));
  args=s7_cdr(args);
  obj->string=s7_car(args);
  return obj->string;
}
static s7_pointer ffi_get_parse_error_position(s7_scheme *s7, s7_pointer args)
{
  parse_error *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == parse_error_tag)))
    return s7_wrong_type_arg_error(s7, "parse-error-position", 1, s7_car(args), "a parse-error");
  obj = (parse_error *)s7_object_value(s7_car(args));
  return obj->position;
}
static s7_pointer ffi_set_parse_error_position(s7_scheme *s7, s7_pointer args)
{
  parse_error *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == parse_error_tag)))
    return s7_wrong_type_arg_error(s7, "parse-error-position-set!", 1, s7_car(args), "a parse-error");
  obj = (parse_error *)s7_object_value(s7_car(args));
  args=s7_cdr(args);
  obj->position=s7_car(args);
  return obj->position;
}
static s7_int parse_unit_tag = 673;
typedef struct
{
  s7_pointer type;
  s7_pointer parsed;
  s7_pointer position;
} parse_unit;
static void cm_parse_unit_free(void *obj)
{
  parse_unit *f = (parse_unit *)obj;
  if (f) free(f);
}
static bool cm_parse_unit_equal(void *obj1, void *obj2)
{
  return (obj1 == obj2);
}
static void cm_parse_unit_mark(void *obj)
{
  parse_unit *f = (parse_unit *)obj;
  s7_mark_object(f->type);
  s7_mark_object(f->parsed);
  s7_mark_object(f->position);
}
static s7_pointer ffi_is_parse_unit(s7_scheme *s7, s7_pointer args)
{
  return make_s7_boolean(s7, ((s7_is_object(s7_car(args))) &&
                              (s7_object_type(s7_car(args)) == parse_unit_tag)));
}
static s7_pointer ffi_make_parse_unit(s7_scheme *s7, s7_pointer args)
{
  parse_unit *obj = (parse_unit *)malloc(sizeof(parse_unit));
  obj->type=s7_car(args);
  args=s7_cdr(args);
  obj->parsed=s7_car(args);
  args=s7_cdr(args);
  obj->position=s7_car(args);
  args=s7_cdr(args);
  return s7_make_object(s7, parse_unit_tag, (void *)obj);
}
static s7_pointer ffi_get_parse_unit_type(s7_scheme *s7, s7_pointer args)
{
  parse_unit *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == parse_unit_tag)))
    return s7_wrong_type_arg_error(s7, "parse-unit-type", 1, s7_car(args), "a parse-unit");
  obj = (parse_unit *)s7_object_value(s7_car(args));
  return obj->type;
}
static s7_pointer ffi_set_parse_unit_type(s7_scheme *s7, s7_pointer args)
{
  parse_unit *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == parse_unit_tag)))
    return s7_wrong_type_arg_error(s7, "parse-unit-type-set!", 1, s7_car(args), "a parse-unit");
  obj = (parse_unit *)s7_object_value(s7_car(args));
  args=s7_cdr(args);
  obj->type=s7_car(args);
  return obj->type;
}
static s7_pointer ffi_get_parse_unit_parsed(s7_scheme *s7, s7_pointer args)
{
  parse_unit *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == parse_unit_tag)))
    return s7_wrong_type_arg_error(s7, "parse-unit-parsed", 1, s7_car(args), "a parse-unit");
  obj = (parse_unit *)s7_object_value(s7_car(args));
  return obj->parsed;
}
static s7_pointer ffi_set_parse_unit_parsed(s7_scheme *s7, s7_pointer args)
{
  parse_unit *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == parse_unit_tag)))
    return s7_wrong_type_arg_error(s7, "parse-unit-parsed-set!", 1, s7_car(args), "a parse-unit");
  obj = (parse_unit *)s7_object_value(s7_car(args));
  args=s7_cdr(args);
  obj->parsed=s7_car(args);
  return obj->parsed;
}
static s7_pointer ffi_get_parse_unit_position(s7_scheme *s7, s7_pointer args)
{
  parse_unit *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == parse_unit_tag)))
    return s7_wrong_type_arg_error(s7, "parse-unit-position", 1, s7_car(args), "a parse-unit");
  obj = (parse_unit *)s7_object_value(s7_car(args));
  return obj->position;
}
static s7_pointer ffi_set_parse_unit_position(s7_scheme *s7, s7_pointer args)
{
  parse_unit *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == parse_unit_tag)))
    return s7_wrong_type_arg_error(s7, "parse-unit-position-set!", 1, s7_car(args), "a parse-unit");
  obj = (parse_unit *)s7_object_value(s7_car(args));
  args=s7_cdr(args);
  obj->position=s7_car(args);
  return obj->position;
}
static s7_int spectrum_tag = 674;
typedef struct
{
  s7_pointer time;
  s7_pointer size;
  s7_pointer freqs;
  s7_pointer amps;
} spectrum;
static void cm_spectrum_free(void *obj)
{
  spectrum *f = (spectrum *)obj;
  if (f) free(f);
}
static bool cm_spectrum_equal(void *obj1, void *obj2)
{
  return (obj1 == obj2);
}
static void cm_spectrum_mark(void *obj)
{
  spectrum *f = (spectrum *)obj;
  s7_mark_object(f->time);
  s7_mark_object(f->size);
  s7_mark_object(f->freqs);
  s7_mark_object(f->amps);
}
static s7_pointer ffi_is_spectrum(s7_scheme *s7, s7_pointer args)
{
  return make_s7_boolean(s7, ((s7_is_object(s7_car(args))) &&
                              (s7_object_type(s7_car(args)) == spectrum_tag)));
}
static s7_pointer ffi_make_spectrum(s7_scheme *s7, s7_pointer args)
{
  spectrum *obj = (spectrum *)malloc(sizeof(spectrum));
  obj->time=s7_car(args);
  args=s7_cdr(args);
  obj->size=s7_car(args);
  args=s7_cdr(args);
  obj->freqs=s7_car(args);
  args=s7_cdr(args);
  obj->amps=s7_car(args);
  args=s7_cdr(args);
  return s7_make_object(s7, spectrum_tag, (void *)obj);
}
static s7_pointer ffi_get_spectrum_time(s7_scheme *s7, s7_pointer args)
{
  spectrum *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == spectrum_tag)))
    return s7_wrong_type_arg_error(s7, "spectrum-time", 1, s7_car(args), "a spectrum");
  obj = (spectrum *)s7_object_value(s7_car(args));
  return obj->time;
}
static s7_pointer ffi_set_spectrum_time(s7_scheme *s7, s7_pointer args)
{
  spectrum *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == spectrum_tag)))
    return s7_wrong_type_arg_error(s7, "spectrum-time-set!", 1, s7_car(args), "a spectrum");
  obj = (spectrum *)s7_object_value(s7_car(args));
  args=s7_cdr(args);
  obj->time=s7_car(args);
  return obj->time;
}
static s7_pointer ffi_get_spectrum_size(s7_scheme *s7, s7_pointer args)
{
  spectrum *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == spectrum_tag)))
    return s7_wrong_type_arg_error(s7, "spectrum-size", 1, s7_car(args), "a spectrum");
  obj = (spectrum *)s7_object_value(s7_car(args));
  return obj->size;
}
static s7_pointer ffi_set_spectrum_size(s7_scheme *s7, s7_pointer args)
{
  spectrum *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == spectrum_tag)))
    return s7_wrong_type_arg_error(s7, "spectrum-size-set!", 1, s7_car(args), "a spectrum");
  obj = (spectrum *)s7_object_value(s7_car(args));
  args=s7_cdr(args);
  obj->size=s7_car(args);
  return obj->size;
}
static s7_pointer ffi_get_spectrum_freqs(s7_scheme *s7, s7_pointer args)
{
  spectrum *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == spectrum_tag)))
    return s7_wrong_type_arg_error(s7, "spectrum-freqs", 1, s7_car(args), "a spectrum");
  obj = (spectrum *)s7_object_value(s7_car(args));
  return obj->freqs;
}
static s7_pointer ffi_set_spectrum_freqs(s7_scheme *s7, s7_pointer args)
{
  spectrum *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == spectrum_tag)))
    return s7_wrong_type_arg_error(s7, "spectrum-freqs-set!", 1, s7_car(args), "a spectrum");
  obj = (spectrum *)s7_object_value(s7_car(args));
  args=s7_cdr(args);
  obj->freqs=s7_car(args);
  return obj->freqs;
}
static s7_pointer ffi_get_spectrum_amps(s7_scheme *s7, s7_pointer args)
{
  spectrum *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == spectrum_tag)))
    return s7_wrong_type_arg_error(s7, "spectrum-amps", 1, s7_car(args), "a spectrum");
  obj = (spectrum *)s7_object_value(s7_car(args));
  return obj->amps;
}
static s7_pointer ffi_set_spectrum_amps(s7_scheme *s7, s7_pointer args)
{
  spectrum *obj;
  if (!((s7_is_object(s7_car(args))) && (s7_object_type(s7_car(args)) == spectrum_tag)))
    return s7_wrong_type_arg_error(s7, "spectrum-amps-set!", 1, s7_car(args), "a spectrum");
  obj = (spectrum *)s7_object_value(s7_car(args));
  args=s7_cdr(args);
  obj->amps=s7_car(args);
  return obj->amps;
}

// cm_init definitions


void cm_init(s7_scheme *s7)
{
//period_tag=s7_new_type("<period>", NULL, cm_period_free, cm_period_equal, cm_period_mark, NULL, NULL);
  period_tag = s7_make_c_type(s7, "<period>");
  s7_c_type_set_free(s7, period_tag, cm_period_free);
  s7_c_type_set_equal(s7, period_tag, cm_period_equal);
  s7_c_type_set_mark(s7, period_tag, cm_period_mark);
  
  s7_define_function(s7, "make-period", ffi_make_period, 6, 0, false, "period constructor");
  s7_define_function(s7, "period?", ffi_is_period, 1, 0, false, "period predicate");
  s7_define_function(s7, "period-count", ffi_get_period_count, 1, 0, false, "get period count slot");
  s7_define_function(s7, "period-count-set!", ffi_set_period_count, 2, 0, false, "set period count slot");
  s7_define_function(s7, "period-length", ffi_get_period_length, 1, 0, false, "get period length slot");
  s7_define_function(s7, "period-length-set!", ffi_set_period_length, 2, 0, false, "set period length slot");
  s7_define_function(s7, "period-stream", ffi_get_period_stream, 1, 0, false, "get period stream slot");
  s7_define_function(s7, "period-stream-set!", ffi_set_period_stream, 2, 0, false, "set period stream slot");
  s7_define_function(s7, "period-default", ffi_get_period_cdefault, 1, 0, false, "get period default slot");
  s7_define_function(s7, "period-default-set!", ffi_set_period_cdefault, 2, 0, false, "set period default slot");
  s7_define_function(s7, "period-omit", ffi_get_period_omit, 1, 0, false, "get period omit slot");
  s7_define_function(s7, "period-omit-set!", ffi_set_period_omit, 2, 0, false, "set period omit slot");
  s7_define_function(s7, "period-reps", ffi_get_period_reps, 1, 0, false, "get period reps slot");
  s7_define_function(s7, "period-reps-set!", ffi_set_period_reps, 2, 0, false, "set period reps slot");

//  pattern_tag=s7_new_type("<pattern>", cm_pattern_print, cm_pattern_free, cm_pattern_equal, cm_pattern_mark, NULL, NULL);
  pattern_tag = s7_make_c_type(s7, "<pattern>");
  s7_c_type_set_free(s7, pattern_tag, cm_pattern_free);
  s7_c_type_set_equal(s7, pattern_tag, cm_pattern_equal);
  s7_c_type_set_mark(s7, pattern_tag, cm_pattern_mark);

  s7_define_function(s7, "make-pattern", ffi_make_pattern, 14, 0, false, "pattern constructor");
  s7_define_function(s7, "pattern?", ffi_is_pattern, 1, 0, false, "pattern predicate");
  s7_define_function(s7, "pattern-flags", ffi_get_pattern_flags, 1, 0, false, "get pattern flags slot");
  s7_define_function(s7, "pattern-flags-set!", ffi_set_pattern_flags, 2, 0, false, "set pattern flags slot");
  s7_define_function(s7, "pattern-data", ffi_get_pattern_data, 1, 0, false, "get pattern data slot");
  s7_define_function(s7, "pattern-data-set!", ffi_set_pattern_data, 2, 0, false, "set pattern data slot");
  s7_define_function(s7, "pattern-length", ffi_get_pattern_length, 1, 0, false, "get pattern length slot");
  s7_define_function(s7, "pattern-length-set!", ffi_set_pattern_length, 2, 0, false, "set pattern length slot");
  s7_define_function(s7, "pattern-datum", ffi_get_pattern_datum, 1, 0, false, "get pattern datum slot");
  s7_define_function(s7, "pattern-datum-set!", ffi_set_pattern_datum, 2, 0, false, "set pattern datum slot");
  s7_define_function(s7, "pattern-period", ffi_get_pattern_period, 1, 0, false, "get pattern period slot");
  s7_define_function(s7, "pattern-period-set!", ffi_set_pattern_period, 2, 0, false, "set pattern period slot");
  s7_define_function(s7, "pattern-value", ffi_get_pattern_value, 1, 0, false, "get pattern value slot");
  s7_define_function(s7, "pattern-value-set!", ffi_set_pattern_value, 2, 0, false, "set pattern value slot");
  s7_define_function(s7, "pattern-state", ffi_get_pattern_state, 1, 0, false, "get pattern state slot");
  s7_define_function(s7, "pattern-state-set!", ffi_set_pattern_state, 2, 0, false, "set pattern state slot");
  s7_define_function(s7, "pattern-repeat", ffi_get_pattern_repeat, 1, 0, false, "get pattern repeat slot");
  s7_define_function(s7, "pattern-repeat-set!", ffi_set_pattern_repeat, 2, 0, false, "set pattern repeat slot");
  s7_define_function(s7, "pattern-returning", ffi_get_pattern_returning, 1, 0, false, "get pattern returning slot");
  s7_define_function(s7, "pattern-returning-set!", ffi_set_pattern_returning, 2, 0, false, "set pattern returning slot");
  s7_define_function(s7, "pattern-counting", ffi_get_pattern_counting, 1, 0, false, "get pattern counting slot");
  s7_define_function(s7, "pattern-counting-set!", ffi_set_pattern_counting, 2, 0, false, "set pattern counting slot");
  s7_define_function(s7, "pattern-traversing", ffi_get_pattern_traversing, 1, 0, false, "get pattern traversing slot");
  s7_define_function(s7, "pattern-traversing-set!", ffi_set_pattern_traversing, 2, 0, false, "set pattern traversing slot");
  s7_define_function(s7, "pattern-next", ffi_get_pattern_next, 1, 0, false, "get pattern next slot");
  s7_define_function(s7, "pattern-next-set!", ffi_set_pattern_next, 2, 0, false, "set pattern next slot");
  s7_define_function(s7, "pattern-mapr", ffi_get_pattern_mapr, 1, 0, false, "get pattern mapr slot");
  s7_define_function(s7, "pattern-mapr-set!", ffi_set_pattern_mapr, 2, 0, false, "set pattern mapr slot");
  s7_define_function(s7, "pattern-cache", ffi_get_pattern_cache, 1, 0, false, "get pattern cache slot");
  s7_define_function(s7, "pattern-cache-set!", ffi_set_pattern_cache, 2, 0, false, "set pattern cache slot");

//  palin_tag=s7_new_type("<palin>", NULL, cm_palin_free, cm_palin_equal, cm_palin_mark, NULL, NULL);
  palin_tag = s7_make_c_type(s7, "<palin>");
  s7_c_type_set_free(s7, palin_tag, cm_palin_free);
  s7_c_type_set_equal(s7, palin_tag, cm_palin_equal);
  s7_c_type_set_mark(s7, palin_tag, cm_palin_mark);

  s7_define_function(s7, "make-palin", ffi_make_palin, 5, 0, false, "palin constructor");
  s7_define_function(s7, "palin?", ffi_is_palin, 1, 0, false, "palin predicate");
  s7_define_function(s7, "palin-pos", ffi_get_palin_pos, 1, 0, false, "get palin pos slot");
  s7_define_function(s7, "palin-pos-set!", ffi_set_palin_pos, 2, 0, false, "set palin pos slot");
  s7_define_function(s7, "palin-len", ffi_get_palin_len, 1, 0, false, "get palin len slot");
  s7_define_function(s7, "palin-len-set!", ffi_set_palin_len, 2, 0, false, "set palin len slot");
  s7_define_function(s7, "palin-inc", ffi_get_palin_inc, 1, 0, false, "get palin inc slot");
  s7_define_function(s7, "palin-inc-set!", ffi_set_palin_inc, 2, 0, false, "set palin inc slot");
  s7_define_function(s7, "palin-mode", ffi_get_palin_mode, 1, 0, false, "get palin mode slot");
  s7_define_function(s7, "palin-mode-set!", ffi_set_palin_mode, 2, 0, false, "set palin mode slot");
  s7_define_function(s7, "palin-elide", ffi_get_palin_elide, 1, 0, false, "get palin elide slot");
  s7_define_function(s7, "palin-elide-set!", ffi_set_palin_elide, 2, 0, false, "set palin elide slot");

//  random_item_tag=s7_new_type("<random-item>", NULL, cm_random_item_free, cm_random_item_equal, cm_random_item_mark, NULL, NULL);
  random_item_tag = s7_make_c_type(s7, "<random-item>");
  s7_c_type_set_free(s7, random_item_tag, cm_random_item_free);
  s7_c_type_set_equal(s7, random_item_tag, cm_random_item_equal);
  s7_c_type_set_mark(s7, random_item_tag, cm_random_item_mark);

  s7_define_function(s7, "make-random-item", ffi_make_random_item, 8, 0, false, "random-item constructor");
  s7_define_function(s7, "random-item?", ffi_is_random_item, 1, 0, false, "random-item predicate");
  s7_define_function(s7, "random-item-datum", ffi_get_random_item_datum, 1, 0, false, "get random-item datum slot");
  s7_define_function(s7, "random-item-datum-set!", ffi_set_random_item_datum, 2, 0, false, "set random-item datum slot");
  s7_define_function(s7, "random-item-index", ffi_get_random_item_index, 1, 0, false, "get random-item index slot");
  s7_define_function(s7, "random-item-index-set!", ffi_set_random_item_index, 2, 0, false, "set random-item index slot");
  s7_define_function(s7, "random-item-weight", ffi_get_random_item_weight, 1, 0, false, "get random-item weight slot");
  s7_define_function(s7, "random-item-weight-set!", ffi_set_random_item_weight, 2, 0, false, "set random-item weight slot");
  s7_define_function(s7, "random-item-min", ffi_get_random_item_min, 1, 0, false, "get random-item min slot");
  s7_define_function(s7, "random-item-min-set!", ffi_set_random_item_min, 2, 0, false, "set random-item min slot");
  s7_define_function(s7, "random-item-max", ffi_get_random_item_max, 1, 0, false, "get random-item max slot");
  s7_define_function(s7, "random-item-max-set!", ffi_set_random_item_max, 2, 0, false, "set random-item max slot");
  s7_define_function(s7, "random-item-count", ffi_get_random_item_count, 1, 0, false, "get random-item count slot");
  s7_define_function(s7, "random-item-count-set!", ffi_set_random_item_count, 2, 0, false, "set random-item count slot");
  s7_define_function(s7, "random-item-id", ffi_get_random_item_id, 1, 0, false, "get random-item id slot");
  s7_define_function(s7, "random-item-id-set!", ffi_set_random_item_id, 2, 0, false, "set random-item id slot");
  s7_define_function(s7, "random-item-minmax", ffi_get_random_item_minmax, 1, 0, false, "get random-item minmax slot");
  s7_define_function(s7, "random-item-minmax-set!", ffi_set_random_item_minmax, 2, 0, false, "set random-item minmax slot");

//  graph_node_tag=s7_new_type("<graph-node>", NULL, cm_graph_node_free, cm_graph_node_equal, cm_graph_node_mark, NULL, NULL);
  graph_node_tag = s7_make_c_type(s7, "<graph-node>");
  s7_c_type_set_free(s7, graph_node_tag, cm_graph_node_free);
  s7_c_type_set_equal(s7, graph_node_tag, cm_graph_node_equal);
  s7_c_type_set_mark(s7, graph_node_tag, cm_graph_node_mark);
 
  s7_define_function(s7, "make-graph-node", ffi_make_graph_node, 3, 0, false, "graph-node constructor");
  s7_define_function(s7, "graph-node?", ffi_is_graph_node, 1, 0, false, "graph-node predicate");
  s7_define_function(s7, "graph-node-datum", ffi_get_graph_node_datum, 1, 0, false, "get graph-node datum slot");
  s7_define_function(s7, "graph-node-datum-set!", ffi_set_graph_node_datum, 2, 0, false, "set graph-node datum slot");
  s7_define_function(s7, "graph-node-to", ffi_get_graph_node_to, 1, 0, false, "get graph-node to slot");
  s7_define_function(s7, "graph-node-to-set!", ffi_set_graph_node_to, 2, 0, false, "set graph-node to slot");
  s7_define_function(s7, "graph-node-id", ffi_get_graph_node_id, 1, 0, false, "get graph-node id slot");
  s7_define_function(s7, "graph-node-id-set!", ffi_set_graph_node_id, 2, 0, false, "set graph-node id slot");

//  rule_tag=s7_new_type("<rule>", NULL, cm_rule_free, cm_rule_equal, cm_rule_mark, NULL, NULL);
  rule_tag = s7_make_c_type(s7, "<rule>");
  s7_c_type_set_free(s7, rule_tag, cm_rule_free);
  s7_c_type_set_equal(s7, rule_tag, cm_rule_equal);
  s7_c_type_set_mark(s7, rule_tag, cm_rule_mark);
    
  s7_define_function(s7, "make-rule", ffi_make_rule, 5, 0, false, "rule constructor");
  s7_define_function(s7, "rule?", ffi_is_rule, 1, 0, false, "rule predicate");
  s7_define_function(s7, "rule-name", ffi_get_rule_name, 1, 0, false, "get rule name slot");
  s7_define_function(s7, "rule-name-set!", ffi_set_rule_name, 2, 0, false, "set rule name slot");
  s7_define_function(s7, "rule-type", ffi_get_rule_type, 1, 0, false, "get rule type slot");
  s7_define_function(s7, "rule-type-set!", ffi_set_rule_type, 2, 0, false, "set rule type slot");
  s7_define_function(s7, "rule-pattern", ffi_get_rule_pattern, 1, 0, false, "get rule pattern slot");
  s7_define_function(s7, "rule-pattern-set!", ffi_set_rule_pattern, 2, 0, false, "set rule pattern slot");
  s7_define_function(s7, "rule-parser", ffi_get_rule_parser, 1, 0, false, "get rule parser slot");
  s7_define_function(s7, "rule-parser-set!", ffi_set_rule_parser, 2, 0, false, "set rule parser slot");
  s7_define_function(s7, "rule-emiter", ffi_get_rule_emiter, 1, 0, false, "get rule emiter slot");
  s7_define_function(s7, "rule-emiter-set!", ffi_set_rule_emiter, 2, 0, false, "set rule emiter slot");

//  parse_error_tag=s7_new_type("<parse-error>", NULL, cm_parse_error_free, cm_parse_error_equal, cm_parse_error_mark, NULL, NULL);
  parse_error_tag = s7_make_c_type(s7, "<parse-error>");
  s7_c_type_set_free(s7, parse_error_tag, cm_parse_error_free);
  s7_c_type_set_equal(s7, parse_error_tag, cm_parse_error_equal);
  s7_c_type_set_mark(s7, parse_error_tag, cm_parse_error_mark);

  s7_define_function(s7, "make-parse-error", ffi_make_parse_error, 2, 0, false, "parse-error constructor");
  s7_define_function(s7, "parse-error?", ffi_is_parse_error, 1, 0, false, "parse-error predicate");
  s7_define_function(s7, "parse-error-string", ffi_get_parse_error_string, 1, 0, false, "get parse-error string slot");
  s7_define_function(s7, "parse-error-string-set!", ffi_set_parse_error_string, 2, 0, false, "set parse-error string slot");
  s7_define_function(s7, "parse-error-position", ffi_get_parse_error_position, 1, 0, false, "get parse-error position slot");
  s7_define_function(s7, "parse-error-position-set!", ffi_set_parse_error_position, 2, 0, false, "set parse-error position slot");

//  parse_unit_tag=s7_new_type("<parse-unit>", NULL, cm_parse_unit_free, cm_parse_unit_equal, cm_parse_unit_mark, NULL, NULL);
  parse_unit_tag = s7_make_c_type(s7, "<parse-unit>");
  s7_c_type_set_free(s7, parse_unit_tag, cm_parse_unit_free);
  s7_c_type_set_equal(s7, parse_unit_tag, cm_parse_unit_equal);
  s7_c_type_set_mark(s7, parse_unit_tag, cm_parse_unit_mark);

  s7_define_function(s7, "make-parse-unit", ffi_make_parse_unit, 3, 0, false, "parse-unit constructor");
  s7_define_function(s7, "parse-unit?", ffi_is_parse_unit, 1, 0, false, "parse-unit predicate");
  s7_define_function(s7, "parse-unit-type", ffi_get_parse_unit_type, 1, 0, false, "get parse-unit type slot");
  s7_define_function(s7, "parse-unit-type-set!", ffi_set_parse_unit_type, 2, 0, false, "set parse-unit type slot");
  s7_define_function(s7, "parse-unit-parsed", ffi_get_parse_unit_parsed, 1, 0, false, "get parse-unit parsed slot");
  s7_define_function(s7, "parse-unit-parsed-set!", ffi_set_parse_unit_parsed, 2, 0, false, "set parse-unit parsed slot");
  s7_define_function(s7, "parse-unit-position", ffi_get_parse_unit_position, 1, 0, false, "get parse-unit position slot");
  s7_define_function(s7, "parse-unit-position-set!", ffi_set_parse_unit_position, 2, 0, false, "set parse-unit position slot");

//  spectrum_tag=s7_new_type("<spectrum>", cm_spectrum_print, cm_spectrum_free, cm_spectrum_equal, cm_spectrum_mark, NULL, NULL);
  spectrum_tag = s7_make_c_type(s7, "<spectrum>");
  s7_c_type_set_free(s7, spectrum_tag, cm_spectrum_free);
  s7_c_type_set_equal(s7, spectrum_tag, cm_spectrum_equal);
  s7_c_type_set_mark(s7, spectrum_tag, cm_spectrum_mark);
  
  s7_define_function(s7, "make-spectrum", ffi_make_spectrum, 4, 0, false, "spectrum constructor");
  s7_define_function(s7, "spectrum?", ffi_is_spectrum, 1, 0, false, "spectrum predicate");
  s7_define_function(s7, "spectrum-time", ffi_get_spectrum_time, 1, 0, false, "get spectrum time slot");
  s7_define_function(s7, "spectrum-time-set!", ffi_set_spectrum_time, 2, 0, false, "set spectrum time slot");
  s7_define_function(s7, "spectrum-size", ffi_get_spectrum_size, 1, 0, false, "get spectrum size slot");
  s7_define_function(s7, "spectrum-size-set!", ffi_set_spectrum_size, 2, 0, false, "set spectrum size slot");
  s7_define_function(s7, "spectrum-freqs", ffi_get_spectrum_freqs, 1, 0, false, "get spectrum freqs slot");
  s7_define_function(s7, "spectrum-freqs-set!", ffi_set_spectrum_freqs, 2, 0, false, "set spectrum freqs slot");
  s7_define_function(s7, "spectrum-amps", ffi_get_spectrum_amps, 1, 0, false, "get spectrum amps slot");
  s7_define_function(s7, "spectrum-amps-set!", ffi_set_spectrum_amps, 2, 0, false, "set spectrum amps slot");
  s7_define_function(s7, "ffi_quit", ffi_quit, 0, 0, false, "ffi function");
  s7_define_function(s7, "ffi_print_error", ffi_print_error, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_print_output", ffi_print_output, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_print_values", ffi_print_values, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_print_warning", ffi_print_warning, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_print_stdout", ffi_print_stdout, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_cm_print", ffi_cm_print, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_shell", ffi_shell, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_play", ffi_play, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_load", ffi_load, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_rescale", ffi_rescale, 6, 0, false, "ffi function");
  s7_define_function(s7, "ffi_discrete", ffi_discrete, 6, 0, false, "ffi function");
  s7_define_function(s7, "ffi_float_to_fixnum", ffi_float_to_fixnum, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_quantize", ffi_quantize, 2, 0, false, "ffi function");
  s7_define_function(s7, "ffi_rhythm_to_seconds", ffi_rhythm_to_seconds, 3, 0, false, "ffi function");
  s7_define_function(s7, "ffi_cents_to_scaler", ffi_cents_to_scaler, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_scaler_to_cents", ffi_scaler_to_cents, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_scaler_to_steps", ffi_scaler_to_steps, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_explseg", ffi_explseg, 4, 0, false, "ffi function");
  s7_define_function(s7, "ffi_geoseg", ffi_geoseg, 4, 0, false, "ffi function");
  s7_define_function(s7, "ffi_keynum_to_hertz", ffi_keynum_to_hertz, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_keynum_to_pc", ffi_keynum_to_pc, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_hertz_to_keynum", ffi_hertz_to_keynum, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_get_random_seed", ffi_get_random_seed, 0, 0, false, "ffi function");
  s7_define_function(s7, "ffi_set_random_seed", ffi_set_random_seed, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_ranint", ffi_ranint, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_ranfloat", ffi_ranfloat, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_ranint2", ffi_ranint2, 2, 0, false, "ffi function");
  s7_define_function(s7, "ffi_ranfloat2", ffi_ranfloat2, 2, 0, false, "ffi function");
  s7_define_function(s7, "ffi_ranlow", ffi_ranlow, 0, 0, false, "ffi function");
  s7_define_function(s7, "ffi_ranhigh", ffi_ranhigh, 0, 0, false, "ffi function");
  s7_define_function(s7, "ffi_ranmiddle", ffi_ranmiddle, 0, 0, false, "ffi function");
  s7_define_function(s7, "ffi_rangauss", ffi_rangauss, 2, 0, false, "ffi function");
  s7_define_function(s7, "ffi_ranexp", ffi_ranexp, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_ranbeta", ffi_ranbeta, 2, 0, false, "ffi function");
  s7_define_function(s7, "ffi_rangamma", ffi_rangamma, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_rancauchy", ffi_rancauchy, 0, 0, false, "ffi function");
  s7_define_function(s7, "ffi_ranpoisson", ffi_ranpoisson, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_ranpink", ffi_ranpink, 0, 0, false, "ffi function");
  s7_define_function(s7, "ffi_ranbrown", ffi_ranbrown, 0, 0, false, "ffi function");
  s7_define_function(s7, "ffi_bes_jn", ffi_bes_jn, 2, 0, false, "ffi function");
  s7_define_function(s7, "ffi_log_ten", ffi_log_ten, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_log_two", ffi_log_two, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_now", ffi_now, 0, 0, false, "ffi function");
  s7_define_function(s7, "ffi_sched_sprout", ffi_sched_sprout, 5, 0, false, "ffi function");
  s7_define_function(s7, "ffi_sched_paused_p", ffi_sched_paused_p, 0, 0, false, "ffi function");
  s7_define_function(s7, "ffi_sched_pause", ffi_sched_pause, 0, 0, false, "ffi function");
  s7_define_function(s7, "ffi_sched_continue", ffi_sched_continue, 0, 0, false, "ffi function");
  s7_define_function(s7, "ffi_sched_stop", ffi_sched_stop, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_sched_stop_all", ffi_sched_stop_all, 0, 0, false, "ffi function");
  s7_define_function(s7, "ffi_sched_busy_p", ffi_sched_busy_p, 0, 0, false, "ffi function");
  s7_define_function(s7, "ffi_sched_score_mode_p", ffi_sched_score_mode_p, 0, 0, false, "ffi function");
  s7_define_function(s7, "ffi_sched_get_score_mode", ffi_sched_get_score_mode, 0, 0, false, "ffi function");
  s7_define_function(s7, "ffi_sched_set_score_mode", ffi_sched_set_score_mode, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_sched_score_time", ffi_sched_score_time, 0, 0, false, "ffi function");
  s7_define_function(s7, "ffi_sched_metro_id_valid", ffi_sched_metro_id_valid, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_sched_make_metro", ffi_sched_make_metro, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_sched_delete_metro", ffi_sched_delete_metro, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_sched_get_metros", ffi_sched_get_metros, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_sched_set_tempo", ffi_sched_set_tempo, 4, 0, false, "ffi function");
  s7_define_function(s7, "ffi_sched_get_metro_beat", ffi_sched_get_metro_beat, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_sched_get_metro_tempo", ffi_sched_get_metro_tempo, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_sched_sync_metros", ffi_sched_sync_metros, 6, 0, false, "ffi function");
  s7_define_function(s7, "ffi_sched_metro_phase", ffi_sched_metro_phase, 3, 0, false, "ffi function");
  s7_define_function(s7, "ffi_sched_metro_dur", ffi_sched_metro_dur, 2, 0, false, "ffi function");
  s7_define_function(s7, "ffi_user_home_directory", ffi_user_home_directory, 0, 0, false, "ffi function");
  s7_define_function(s7, "ffi_temp_directory", ffi_temp_directory, 0, 0, false, "ffi function");
  s7_define_function(s7, "ffi_current_directory", ffi_current_directory, 0, 0, false, "ffi function");
  s7_define_function(s7, "ffi_set_current_directory", ffi_set_current_directory, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_pathname_directory", ffi_pathname_directory, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_pathname_name", ffi_pathname_name, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_pathname_type", ffi_pathname_type, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_full_pathname", ffi_full_pathname, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_pathname_exists_p", ffi_pathname_exists_p, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_pathname_writable_p", ffi_pathname_writable_p, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_pathname_directory_p", ffi_pathname_directory_p, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_directory", ffi_directory, 2, 0, false, "ffi function");
  s7_define_function(s7, "ffi_pathname_to_key", ffi_pathname_to_key, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_insure_new_file_version", ffi_insure_new_file_version, 2, 0, false, "ffi function");
  s7_define_function(s7, "ffi_string_hash", ffi_string_hash, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_midifile_import", ffi_midifile_import, 3, 0, false, "ffi function");
  s7_define_function(s7, "ffi_midifile_header", ffi_midifile_header, 2, 0, false, "ffi function");
  s7_define_function(s7, "ffi_sal_allocate_tokens", ffi_sal_allocate_tokens, 0, 0, false, "ffi function");
  s7_define_function(s7, "ffi_sal_free_tokens", ffi_sal_free_tokens, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_sal_tokenize_file", ffi_sal_tokenize_file, 3, 0, false, "ffi function");
  s7_define_function(s7, "ffi_sal_tokenize_string", ffi_sal_tokenize_string, 3, 0, false, "ffi function");
  s7_define_function(s7, "ffi_sal_token_type", ffi_sal_token_type, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_sal_token_string", ffi_sal_token_string, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_sal_token_position", ffi_sal_token_position, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_mouse_x", ffi_mouse_x, 3, 0, false, "ffi function");
  s7_define_function(s7, "ffi_mouse_y", ffi_mouse_y, 3, 0, false, "ffi function");
  s7_define_function(s7, "ffi_mouse_button", ffi_mouse_button, 2, 0, false, "ffi function");
  s7_define_function(s7, "ffi_mp_open_output", ffi_mp_open_output, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_mp_open_input", ffi_mp_open_input, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_mp_close_output", ffi_mp_close_output, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_mp_close_input", ffi_mp_close_input, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_mp_open_score", ffi_mp_open_score, 2, 0, false, "ffi function");
  s7_define_function(s7, "ffi_mp_close_score", ffi_mp_close_score, 0, 0, false, "ffi function");
  s7_define_function(s7, "ffi_mp_send_note", ffi_mp_send_note, 5, 0, false, "ffi function");
  s7_define_function(s7, "ffi_mp_send_data", ffi_mp_send_data, 5, 0, false, "ffi function");
  s7_define_function(s7, "ffi_mp_set_channel_mask", ffi_mp_set_channel_mask, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_mp_set_message_mask", ffi_mp_set_message_mask, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_mp_set_tuning", ffi_mp_set_tuning, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_mp_set_instruments", ffi_mp_set_instruments, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_mp_set_midi_hook", ffi_mp_set_midi_hook, 2, 0, false, "ffi function");
  s7_define_function(s7, "ffi_mp_is_midi_hook", ffi_mp_is_midi_hook, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_cs_open_score", ffi_cs_open_score, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_cs_close_score", ffi_cs_close_score, 0, 0, false, "ffi function");
  s7_define_function(s7, "ffi_cs_send_score", ffi_cs_send_score, 4, 0, false, "ffi function");
  s7_define_function(s7, "ffi_fms_open_score", ffi_fms_open_score, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_fms_close_score", ffi_fms_close_score, 0, 0, false, "ffi function");
  s7_define_function(s7, "ffi_fms_new", ffi_fms_new, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_fms_select", ffi_fms_select, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_fms_free", ffi_fms_free, 0, 0, false, "ffi function");
  s7_define_function(s7, "ffi_fms_clear", ffi_fms_clear, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_fms_load", ffi_fms_load, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_fms_run", ffi_fms_run, 0, 0, false, "ffi function");
  s7_define_function(s7, "ffi_fms_save", ffi_fms_save, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_fms_save_as", ffi_fms_save_as, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_fms_isfiletype", ffi_fms_isfiletype, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_fms_merge", ffi_fms_merge, 4, 0, false, "ffi function");
  s7_define_function(s7, "ffi_fms_ival", ffi_fms_ival, 3, 0, false, "ffi function");
  s7_define_function(s7, "ffi_fms_rval", ffi_fms_rval, 4, 0, false, "ffi function");
  s7_define_function(s7, "ffi_fms_fval", ffi_fms_fval, 3, 0, false, "ffi function");
  s7_define_function(s7, "ffi_fms_sval", ffi_fms_sval, 3, 0, false, "ffi function");
  s7_define_function(s7, "ffi_fms_act", ffi_fms_act, 2, 0, false, "ffi function");
  s7_define_function(s7, "ffi_fms_err", ffi_fms_err, 0, 0, false, "ffi function");
  s7_define_function(s7, "ffi_plot_xml", ffi_plot_xml, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_plot_add_xml_points", ffi_plot_add_xml_points, 2, 0, false, "ffi function");
  s7_define_function(s7, "ffi_plot_data", ffi_plot_data, 2, 0, false, "ffi function");
  s7_define_function(s7, "ffi_sw_open_from_xml", ffi_sw_open_from_xml, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_sw_draw", ffi_sw_draw, 4, 0, false, "ffi function");
  s7_define_function(s7, "ffi_osc_open_input", ffi_osc_open_input, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_osc_close_input", ffi_osc_close_input, 0, 0, false, "ffi function");
  s7_define_function(s7, "ffi_osc_open_output", ffi_osc_open_output, 2, 0, false, "ffi function");
  s7_define_function(s7, "ffi_osc_close_output", ffi_osc_close_output, 0, 0, false, "ffi function");
  s7_define_function(s7, "ffi_osc_send_message", ffi_osc_send_message, 2, 0, false, "ffi function");
  s7_define_function(s7, "ffi_osc_send_bundle", ffi_osc_send_bundle, 2, 0, false, "ffi function");
  s7_define_function(s7, "ffi_osc_set_hook", ffi_osc_set_hook, 2, 0, false, "ffi function");
  s7_define_function(s7, "ffi_osc_is_hook", ffi_osc_is_hook, 1, 0, false, "ffi function");
  s7_define_function(s7, "ffi_sdif_import", ffi_sdif_import, 2, 0, false, "ffi function");
  cm_init_randomness(s7);
}
