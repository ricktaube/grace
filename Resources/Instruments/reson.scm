
(definstrument (reson startime dur pitch amp numformants indxfun skewfun pcskew skewat skewdc
		      vibfreq vibpc ranvibfreq ranvibpc degree distance reverb-amount data)
  ;; data is a list of lists of form '(ampf resonfrq resonamp ampat ampdc dev0 dev1 indxat indxdc)
  (let ((beg (seconds->samples startime))
	(end (seconds->samples (+ startime dur)))
	(carriers (make-vector numformants))
	(modulator (make-oscil pitch))
	(ampfs (make-vector numformants))
	(indfs (make-vector numformants))
	(c-rats (make-vector numformants))
	(totalamp 0.0)
	(loc (make-locsig degree distance reverb-amount))
	(pervib (make-triangle-wave :frequency vibfreq
				    :amplitude (hz->radians (* vibpc pitch))))
	(ranvib (make-rand-interp :frequency ranvibfreq
				  :amplitude (hz->radians (* ranvibpc pitch))))
	(frqf (let ((frqe (stretch-envelope skewfun 
						      25 (* 100 (/ skewat dur)) 
						      75 (- 100 (* 100 (/ skewdc dur))))))
		(make-env frqe :scaler (hz->radians (* pcskew pitch)) :duration dur))))
    ;; initialize the "formant" generators
    (do ((i 0 (+ i 1)))
	((= i numformants))
      (set! totalamp (+ totalamp ((data i) 2))))
    (do ((i 0 (+ i 1)))
	((= i numformants))
      (let* ((frmdat (data i))
	     (freq (cadr frmdat))
	     (harm (round (/ freq pitch))))
	(let ((rfamp  (frmdat 2))
	      (ampat (* 100 (/ (frmdat 3) dur)))
	      (ampdc (- 100 (* 100 (/ (frmdat 4) dur))))
	      (dev0 (hz->radians (* (frmdat 5) freq)))
	      (dev1 (hz->radians (* (frmdat 6) freq)))
	      (indxat (* 100 (/ (frmdat 7) dur)))
	      (indxdc (- 100 (* 100 (/ (frmdat 8) dur))))
	      (ampf (car frmdat))
	      (rsamp (- 1.0 (abs (- harm (/ freq pitch)))))
	      (cfq (* pitch harm)))
	  (if (zero? ampat) (set! ampat 25))
	  (if (zero? ampdc) (set! ampdc 75))
	  (if (zero? indxat) (set! indxat 25))
	  (if (zero? indxdc) (set! indxdc 75))
	  (set! (indfs i) (make-env (stretch-envelope indxfun 25 indxat 75 indxdc) :duration dur
				    :scaler (- dev1 dev0) :offset dev0))
	  (set! (ampfs i) (make-env (stretch-envelope ampf 25 ampat 75 ampdc) :duration dur
				    :scaler (/ (* rsamp amp rfamp) totalamp)))
	  (set! (c-rats i) harm)
	  (set! (carriers i) (make-oscil cfq)))))
    (if (= numformants 2)
	(let ((e1 (ampfs 0))
	      (e2 (ampfs 1))
	      (c1 (carriers 0))
	      (c2 (carriers 1))
	      (i1 (indfs 0))
	      (i2 (indfs 1))
	      (r1 (c-rats 0))
	      (r2 (c-rats 1)))
	  (do ((i beg (+ i 1)))
	      ((= i end))
	    (let* ((vib (+ (env frqf) (triangle-wave pervib) (rand-interp ranvib)))
		   (modsig (oscil modulator vib)))
	      (locsig loc i (+ (* (env e1)
				  (oscil c1 (+ (* vib r1)
					       (* (env i1) modsig))))
			       (* (env e2)
				  (oscil c2 (+ (* vib r2)
					       (* (env i2) modsig)))))))))
	(do ((i beg (+ i 1)))
	    ((= i end))
	  (let* ((outsum 0.0)
		 (vib (+ (env frqf) (triangle-wave pervib) (rand-interp ranvib)))
		 (modsig (oscil modulator vib)))
	    (do ((k 0 (+ k 1)))
		((= k numformants))
	      (set! outsum (+ outsum
			      (* (env (ampfs k))
				 (oscil (carriers k) 
					(+ (* vib (c-rats k))
					   (* (env (indfs k)) modsig)))))))
	    (locsig loc i outsum))))))

;; (with-sound (:statistics #t) (reson 0 1.0 440 .1 2 '(0 0 100 1) '(0 0 100 1) .1 .1 .1 5 .01 5 .01 0 1.0 0.01 '(((0 0 100 1) 1200 .5 .1 .1 0 1.0 .1 .1) ((0 1 100 0) 2400 .5 .1 .1 0 1.0 .1 .1))))

