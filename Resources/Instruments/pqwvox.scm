;;; -------- PQWVOX
;;; translation of CLM pqwvox.ins (itself translated from MUS10 of MLB's waveshaping voice instrument (using phase quadrature waveshaping))

(definstrument (pqw-vox beg dur freq spacing-freq amp ampfun freqfun freqscl phonemes formant-amps formant-shapes)
  "(pqw-vox beg dur freq spacing-freq amp ampfun freqfun freqscl phonemes formant-amps formant-shapes) produces 
vocal sounds using phase quadrature waveshaping"

  (letrec ((vox-fun
    (let ((formants '((I 390 1990 2550)  (E 530 1840 2480)  (AE 660 1720 2410)
		      (UH 520 1190 2390) (A 730 1090 2440)  (OW 570 840 2410)
		      (U 440 1020 2240)  (OO 300 870 2240)  (ER 490 1350 1690)
		      (W 300 610 2200)   (LL 380 880 2575)  (R 420 1300 1600)
		      (Y 300 2200 3065)  (EE 260 3500 3800) (LH 280 1450 1600)
		      (L 300 1300 3000)  (I2 350 2300 3340) (B 200 800 1750)
		      (D 300 1700 2600)  (G 250 1350 2000)  (M 280 900 2200)
		      (N 280 1700 2600)  (NG 280 2300 2750) (P 300 800 1750)
		      (T 200 1700 2600)  (K 350 1350 2000)  (F 175 900 4400)
		      (TH 200 1400 2200) (S 200 1300 2500)  (SH 200 1800 2000)
		      (V 175 1100 2400)  (THE 200 1600 2200)(Z 200 1300 2500)
		      (ZH 175 1800 2000) (ZZ 900 2400 3800) (VV 565 1045 2400))))
      ;; formant center frequencies for a male speaker

      (lambda (phons which newenv)
	;; make an envelope from which-th entry of phoneme data referred to by phons
	(if (null? phons)
	    newenv
	    (vox-fun (cddr phons) which
		     (append newenv
			     (list (car phons)
				   ((do ((phoneme (cadr phons))
					 (form formants (cdr form)))
					((eq? (caar form) phoneme) 
					 (cdar form)))
				    which)))))))))

    (let ((start (seconds->samples beg))
	  (end (seconds->samples (+ beg dur)))
	  (car-sin (make-oscil 0))
	  (car-cos (make-oscil 0 :initial-phase (/ pi 2.0)))
	  (frq-ratio (/ spacing-freq freq))
	  (fs (length formant-amps))
	  (freqf (make-env freqfun :duration dur :scaler (* freqscl freq) :offset freq))
	  (per-vib (make-triangle-wave :frequency 6.0 :amplitude (* freq .1)))
	  (ran-vib (make-rand-interp :frequency 20.0 :amplitude (* freq .05))))
      (let ((sin-evens (make-vector fs))
	    (cos-evens (make-vector fs))
	    (sin-odds (make-vector fs))
	    (cos-odds (make-vector fs))
	    (ampfs (make-vector fs))
	    (frmfs (make-vector fs))
	    (sin-coeffs (make-vector fs))
	    (cos-coeffs (make-vector fs))
	    (frq 0.0) (rfrq 0.0) (carcos 0.0) (carsin 0.0)
	    (frac 0.0) (fracf 0.0) (frm0 0.0) (frm-int 0) (fax 0.0) (yfax 0.0))
	(do ((i 0 (+ i 1)))
	    ((= i fs))
	  (let ((shape (normalize-partials (formant-shapes i))))
	    (set! (sin-evens i) (make-oscil 0))
	    (set! (sin-odds i) (make-oscil 0))
	    (set! (cos-evens i) (make-oscil 0 :initial-phase (/ pi 2.0)))
	    (set! (cos-odds i) (make-oscil 0 :initial-phase (/ pi 2.0)))
	    (set! (ampfs i) (make-env ampfun :scaler (* amp (formant-amps i)) :duration dur))
	    (set! (cos-coeffs i) (partials->polynomial shape mus-chebyshev-first-kind))
	    (set! (sin-coeffs i) (partials->polynomial shape mus-chebyshev-second-kind))
	    (set! (frmfs i) (make-env (vox-fun phonemes i ()) :duration dur))))
	
	(if (= fs 3) ; unroll the inner loop in the most common case
	    (let ((frmfs0 (frmfs 0))   (frmfs1 (frmfs 1))   (frmfs2 (frmfs 2))
		  (ampfs0 (ampfs 0))   (ampfs1 (ampfs 1))   (ampfs2 (ampfs 2))
		  (sin-evens0 (sin-evens 0))   (sin-evens1 (sin-evens 1))   (sin-evens2 (sin-evens 2))
		  (sin-odds0 (sin-odds 0))     (sin-odds1 (sin-odds 1))     (sin-odds2 (sin-odds 2))
		  (cos-evens0 (cos-evens 0))   (cos-evens1 (cos-evens 1))   (cos-evens2 (cos-evens 2))
		  (cos-odds0 (cos-odds 0))     (cos-odds1 (cos-odds 1))     (cos-odds2 (cos-odds 2))
		  (cos-coeffs0 (cos-coeffs 0)) (cos-coeffs1 (cos-coeffs 1)) (cos-coeffs2 (cos-coeffs 2)) 
		  (sin-coeffs0 (sin-coeffs 0)) (sin-coeffs1 (sin-coeffs 1)) (sin-coeffs2 (sin-coeffs 2)))
	      (do ((i start (+ i 1)))
		  ((= i end))
		(set! frq (+ (env freqf) (triangle-wave per-vib) (rand-interp ran-vib)))
		(set! rfrq (hz->radians frq))
		(set! carsin (oscil car-sin (* rfrq frq-ratio)))
		(set! carcos (oscil car-cos (* rfrq frq-ratio)))
		
		(set! frm0 (/ (env frmfs0) frq))
		(set! frm-int (floor frm0))
		(set! frac (- frm0 frm-int))
		(set! fracf (* frm-int rfrq))
		(set! fax (polynomial cos-coeffs0 carcos))
		(set! yfax (* carsin (polynomial sin-coeffs0 carcos)))
		(outa i 
		      (* (env ampfs0)
			 (if (even? frm-int)
			     (+ (* (- 1.0 frac) (- (* yfax (oscil sin-evens0 fracf)) (* fax (oscil cos-evens0 fracf))))
				(* frac (- (* yfax (oscil sin-odds0 (+ fracf rfrq))) (* fax (oscil cos-odds0 (+ fracf rfrq))))))
			     (+ (* frac (- (* yfax (oscil sin-evens0 (+ fracf rfrq))) (* fax (oscil cos-evens0 (+ fracf rfrq)))))
				(* (- 1.0 frac) (- (* yfax (oscil sin-odds0 fracf)) (* fax (oscil cos-odds0 fracf))))))))
		
		(set! frm0 (/ (env frmfs1) frq))
		(set! frm-int (floor frm0))
		(set! frac (- frm0 frm-int))
		(set! fracf (* frm-int rfrq))
		(set! fax (polynomial cos-coeffs1 carcos))
		(set! yfax (* carsin (polynomial sin-coeffs1 carcos)))
		(outa i 
		      (* (env ampfs1)
			 (if (even? frm-int)
			     (+ (* (- 1.0 frac) (- (* yfax (oscil sin-evens1 fracf)) (* fax (oscil cos-evens1 fracf))))
				(* frac (- (* yfax (oscil sin-odds1 (+ fracf rfrq))) (* fax (oscil cos-odds1 (+ fracf rfrq))))))
			     (+ (* frac (- (* yfax (oscil sin-evens1 (+ fracf rfrq))) (* fax (oscil cos-evens1 (+ fracf rfrq)))))
				(* (- 1.0 frac) (- (* yfax (oscil sin-odds1 fracf)) (* fax (oscil cos-odds1 fracf))))))))
		
		(set! frm0 (/ (env frmfs2) frq))
		(set! frm-int (floor frm0))
		(set! frac (- frm0 frm-int))
		(set! fracf (* frm-int rfrq))
		(set! fax (polynomial cos-coeffs2 carcos))
		(set! yfax (* carsin (polynomial sin-coeffs2 carcos)))
		(outa i 
		      (* (env ampfs2)
			 (if (even? frm-int)
			     (+ (* (- 1.0 frac) (- (* yfax (oscil sin-evens2 fracf)) (* fax (oscil cos-evens2 fracf))))
				(* frac (- (* yfax (oscil sin-odds2 (+ fracf rfrq))) (* fax (oscil cos-odds2 (+ fracf rfrq))))))
			     (+ (* frac (- (* yfax (oscil sin-evens2 (+ fracf rfrq))) (* fax (oscil cos-evens2 (+ fracf rfrq)))))
				(* (- 1.0 frac) (- (* yfax (oscil sin-odds2 fracf)) (* fax (oscil cos-odds2 fracf))))))))))
	    
	    (do ((i start (+ i 1)))
		((= i end))
	      (set! frq (+ (env freqf) (triangle-wave per-vib) (rand-interp ran-vib)))
	      (set! rfrq (hz->radians frq))
	      (set! carsin (oscil car-sin (* rfrq frq-ratio)))
	      (set! carcos (oscil car-cos (* rfrq frq-ratio)))
	      (do ((k 0 (+ k 1)))
		  ((= k fs))
		(set! frm0 (/ (env (vector-ref frmfs k)) frq))
		(set! frm-int (floor frm0))
		(set! frac (- frm0 frm-int))
		(set! fracf (* frm-int rfrq))
		(set! fax (polynomial (vector-ref cos-coeffs k) carcos))
		(set! yfax (* carsin (polynomial (vector-ref sin-coeffs k) carcos)))
		(outa i (* (env (vector-ref ampfs k))
			   (if (even? frm-int)
			       (+ (* (- 1.0 frac) (- (* yfax (oscil (vector-ref sin-evens k) fracf))
						     (* fax (oscil (vector-ref cos-evens k) fracf))))
				  (* frac (- (* yfax (oscil (vector-ref sin-odds k) (+ fracf rfrq)))
					     (* fax (oscil (vector-ref cos-odds k) (+ fracf rfrq))))))
			       (+ (* frac (- (* yfax (oscil (vector-ref sin-evens k) (+ fracf rfrq)))
					     (* fax (oscil (vector-ref cos-evens k) (+ fracf rfrq)))))
				  (* (- 1.0 frac) (- (* yfax (oscil (vector-ref sin-odds k) fracf))
						     (* fax (oscil (vector-ref cos-odds k) fracf)))))))))))))))
  
;;; (with-sound (:statistics #t) (pqw-vox 0 1 300 300 .1 '(0 0 50 1 100 0) '(0 0 100 0) 0 '(0 L 100 L) '(.33 .33 .33) '((1 1 2 .5) (1 .5 2 .5 3 1) (1 1 4 .5))))
;;; (a test to see if the cancellation is working -- sounds like a mosquito)

;;; (with-sound () (pqw-vox 0 2 200 200 .1 '(0 0 50 1 100 0) '(0 0 100 1) .1 '(0 UH 100 ER) '(.8 .15 .05) '((1 1 2 .5) (1 1 2 .5 3 .2 4 .1) (1 1 3 .1 4 .5))))
;;; (with-sound () (pqw-vox 0 2 100 314 .1 '(0 0 50 1 100 0) '(0 0 100 1) .1 '(0 UH 100 ER) '(.8 .15 .05) '((1 1 2 .5) (1 1 2 .5 3 .2 4 .1) (1 1 3 .1 4 .5))))
;;; (with-sound () (pqw-vox 0 2 200 314 .1 '(0 0 50 1 100 0) '(0 0 100 1) .01 '(0 UH 100 ER) '(.8 .15 .05) '((1 1 2 .5) (1 1 4 .1) (1 1 2 .1 4 .05))))
;;; (with-sound () (pqw-vox 0 2 100 414 .2 '(0 0 50 1 100 0) '(0 0 100 1) .01 '(0 OW 50 E 100 ER) '(.8 .15 .05) '((1 1 2 .5 3 .1 4 .01) (1 1 4 .1) (1 1 2 .1 4 .05))))

