;;; -------- mlbvoi
;;;
;;; translation from MUS10 of Marc LeBrun's waveshaping voice instrument (using FM here)
;;; this version translated (and simplified slightly) from CLM's mlbvoi.ins

(definstrument (vox beg dur freq amp ampfun freqfun freqscl phonemes formant-amps formant-indices (vibscl .1) (deg 0) (pcrev 0))  

  (define vox-fun 
    (let ((formants   ; formant center frequencies for a male speaker
	   '((I 390 1990 2550)  (E 530 1840 2480)  (AE 660 1720 2410)
	     (UH 520 1190 2390) (A 730 1090 2440)  (OW 570 840 2410)
	     (U 440 1020 2240)  (OO 300 870 2240)  (ER 490 1350 1690)
	     (W 300 610 2200)   (LL 380 880 2575)  (R 420 1300 1600)
	     (Y 300 2200 3065)  (EE 260 3500 3800) (LH 280 1450 1600)
	     (L 300 1300 3000)  (I2 350 2300 3340) (B 200 800 1750)
	     (D 300 1700 2600)  (G 250 1350 2000)  (M 280 900 2200)
	     (N 280 1700 2600)  (NG 280 2300 2750) (P 300 800 1750)
	     (T 200 1700 2600)  (K 350 1350 2000)  (F 175 900 4400)
	     (TH 200 1400 2200) (S 200 1300 2500)  (SH 200 1800 2000)
	     (V 175 1100 2400)  (THE 200 1600 2200)(Z 200 1300 2500)
	     (ZH 175 1800 2000) (ZZ 900 2400 3800) (VV 565 1045 2400)))
	  (find-phoneme (lambda (phoneme forms)
			  (do ((forms forms (cdr forms)))
			      ((eq? phoneme (caar forms)) 
			       (cdar forms))))))
      (lambda (phons which)
	(let ((f1 ())
	      (len (length phons)))
	  (do ((i 0 (+ i 2)))
	      ((>= i len))
	    (set! f1 (cons ((find-phoneme (phons (+ i 1)) formants) which) (cons (phons i) f1))))
	  (reverse f1)))))
    
  (let ((start (seconds->samples beg))
	(end (seconds->samples (+ beg dur)))
	(car-os (make-oscil 0))
	(fs (length formant-amps))
	(per-vib (make-triangle-wave :frequency 6 :amplitude (hz->radians (* freq vibscl))))
	(ran-vib (make-rand-interp :frequency 20 :amplitude (hz->radians (* freq .5 vibscl))))
	(freqf (make-env freqfun :duration dur :scaler (hz->radians (* freqscl freq)) :offset (hz->radians freq))))
    
    (if (and (= fs 3)
	     (= (channels *output*) 1))
	;; optimize the common case
	(let ((a0 (make-env ampfun :scaler (* amp (formant-amps 0)) :duration dur))
	      (a1 (make-env ampfun :scaler (* amp (formant-amps 1)) :duration dur))
	      (a2 (make-env ampfun :scaler (* amp (formant-amps 2)) :duration dur))
	      (o0 (make-oscil 0.0))
	      (o1 (make-oscil 0.0))
	      (o2 (make-oscil 0.0))
	      (e0 (make-oscil 0.0))
	      (e1 (make-oscil 0.0))
	      (e2 (make-oscil 0.0))
	      (ind0 (formant-indices 0))
	      (ind1 (formant-indices 1))
	      (ind2 (formant-indices 2))
	      (f0 (make-env (vox-fun phonemes 0) :scaler (hz->radians 1.0) :duration dur))
	      (f1 (make-env (vox-fun phonemes 1) :scaler (hz->radians 1.0) :duration dur))
	      (f2 (make-env (vox-fun phonemes 2) :scaler (hz->radians 1.0) :duration dur)))
	  (do ((i start (+ i 1)))
	      ((= i end))
	    (let* ((frq (+ (env freqf) (triangle-wave per-vib) (rand-interp ran-vib)))
		   (carg (oscil car-os frq))
		   (frm0 (/ (env f0) frq))
		   (frm1 (/ (env f1) frq))
		   (frm2 (/ (env f2) frq)))
	      (outa i (+ 
		       (* (env a0) 
			  (+ (* (even-weight frm0) (oscil e0 (+ (* ind0 carg) (even-multiple frm0 frq))))
			     (* (odd-weight frm0) (oscil o0 (+ (* ind0 carg) (odd-multiple frm0 frq))))))
		       (* (env a1) 
			  (+ (* (even-weight frm1) (oscil e1 (+ (* ind1 carg) (even-multiple frm1 frq))))
			     (* (odd-weight frm1) (oscil o1 (+ (* ind1 carg) (odd-multiple frm1 frq))))))
		       (* (env a2) 
			  (+ (* (even-weight frm2) (oscil e2 (+ (* ind2 carg) (even-multiple frm2 frq))))
			     (* (odd-weight frm2) (oscil o2 (+ (* ind2 carg) (odd-multiple frm2 frq)))))))))))
	
	(let ((evens (make-vector fs))
	      (odds (make-vector fs))
	      (ampfs (make-vector fs))
	      (indices (make-float-vector fs))
	      (frmfs (make-vector fs))
	      (carrier 0.0)
	      (frm-int 0)
	      (rfrq 0.0)
	      (frm0 0.0)
	      (frac 0.0)
	      (fracf 0.0)
	      (loc (make-locsig deg 1.0 pcrev)))
	  (do ((i 0 (+ i 1)))
	      ((= i fs))
	    (set! (evens i) (make-oscil 0))
	    (set! (odds i) (make-oscil 0))
	    (set! (ampfs i) (make-env ampfun :scaler (* amp (formant-amps i)) :duration dur))
	    (set! (indices i) (formant-indices i))
	    (set! (frmfs i) (make-env (vox-fun phonemes i) :scaler (hz->radians 1.0) :duration dur)))
	  
	  (if (= fs 3)
	      (let ((frmfs0 (frmfs 0))   (frmfs1 (frmfs 1))   (frmfs2 (frmfs 2))
		    (index0 (indices 0)) (index1 (indices 1)) (index2 (indices 2))
		    (ampfs0 (ampfs 0))   (ampfs1 (ampfs 1))   (ampfs2 (ampfs 2))
		    (evens0 (evens 0))   (evens1 (evens 1))   (evens2 (evens 2))
		    (odds0 (odds 0))     (odds1 (odds 1))     (odds2 (odds 2)))
		(do ((i start (+ i 1))) 
		    ((= i end))
		  (set! rfrq (+ (env freqf) (triangle-wave per-vib) (rand-interp ran-vib)))
		  (set! carrier (oscil car-os rfrq))
		  
		  (set! frm0 (/ (env frmfs0) rfrq))
		  (set! frm-int (floor frm0))
		  (set! frac (- frm0 frm-int))
		  (set! fracf (+ (* index0 carrier) (* frm-int rfrq)))
		  (locsig loc i 
			  (* (env ampfs0) 
			     (if (even? frm-int)
				 (+ (* (- 1.0 frac) (oscil evens0 fracf)) (* frac (oscil odds0 (+ fracf rfrq))))
				 (+ (* frac (oscil evens0 (+ fracf rfrq))) (* (- 1.0 frac) (oscil odds0 fracf))))))
		  
		  (set! frm0 (/ (env frmfs1) rfrq))
		  (set! frm-int (floor frm0))
		  (set! frac (- frm0 frm-int))
		  (set! fracf (+ (* index1 carrier) (* frm-int rfrq)))
		  (locsig loc i
			  (* (env ampfs1) 
			     (if (even? frm-int)
				 (+ (* (- 1.0 frac) (oscil evens1 fracf)) (* frac (oscil odds1 (+ fracf rfrq))))
				 (+ (* frac (oscil evens1 (+ fracf rfrq))) (* (- 1.0 frac) (oscil odds1 fracf))))))

		  (set! frm0 (/ (env frmfs2) rfrq))
		  (set! frm-int (floor frm0))
		  (set! frac (- frm0 frm-int))
		  (set! fracf (+ (* index2 carrier) (* frm-int rfrq)))
		  (locsig loc i 
			  (* (env ampfs2)
			     (if (even? frm-int)
				 (+ (* (- 1.0 frac) (oscil evens2 fracf)) (* frac (oscil odds2 (+ fracf rfrq))))
				 (+ (* frac (oscil evens2 (+ fracf rfrq))) (* (- 1.0 frac) (oscil odds2 fracf))))))))
	      
	      (do ((i start (+ i 1))) 
		  ((= i end))
		(set! rfrq (+ (env freqf) (triangle-wave per-vib) (rand-interp ran-vib)))
		(set! carrier (oscil car-os rfrq)) ; better name: modulator or perhaps perceived-carrier?
		
		(do ((k 0 (+ k 1))) 
		    ((= k fs))
		  (set! frm0 (/ (env (vector-ref frmfs k)) rfrq))
		  (set! frm-int (floor frm0))
		  (set! frac (- frm0 frm-int))
		  (set! fracf (+ (* (float-vector-ref indices k) carrier) (* frm-int rfrq)))
		  (locsig loc i 
			  (* (env (vector-ref ampfs k))
			     (if (even? frm-int)
				 (+ (* (- 1.0 frac) (oscil (vector-ref evens k) fracf))
				    (* frac (oscil (vector-ref odds k) (+ fracf rfrq))))
				 (+ (* frac (oscil (vector-ref evens k) (+ fracf rfrq)))
				    (* (- 1.0 frac) (oscil (vector-ref odds k) fracf)))))))))))))

;;; (with-sound (:statistics #t) (vox 0 2 170 .4 '(0 0 25 1 75 1 100 0) '(0 0 5 .5 10 0 100 1) .1 '(0 E 25 AE 35 ER 65 ER 75 I 100 UH) '(.8 .15 .05) '(.005 .0125 .025) .05 .1))
;;; (with-sound () (vox 0 2 300 .4 '(0 0 25 1 75 1 100 0) '(0 0 5 .5 10 0 100 1) .1 '(0 I 5 OW 10 I 50 AE 100 OO) '(.8 .15 .05) '(.05 .0125 .025) .02 .1))
;;; (with-sound () (vox 0 5 600 .4 '(0 0 25 1 75 1 100 0) '(0 0 5 .5 10 0 100 1) .1 '(0 I 5 OW 10 I 50 AE 100 OO) '(.8 .16 .04) '(.01 .01 .1) .01 .1))
