;
;; Variables and Assignment
; 

; To run examples put the cursor at the end of each expression and
; press Command-Return. Look in the console window for any output.

; A variable is a symbol that evalutates to a value. There are two
; kinds of variables: top-level and local. Top-level variables are
; declared using the 'variable' command at the top-level of your
; program.  Top-level variables are visible to all code you define
; within your program.

; Local variables are declared using the 'with' clause inside
; code blocks like 'begin...end', 'loop...end', or 'run...end'.  More
; about local variables in just a bit...

;
;; Top-level Variables
;

; A top-level variable is a variable declared in the top-level so that
; all your code has access to it. For example, if you are working on a
; twelve-tone composition you might want to create a top-level
; variable to hold the row on which the composition is based. That way
; all the code you develop has access to this imporant piece of data.

variable row = {0 11 1 10 2 9 3 8 4 7 5 6}

print("Prime row: ", row, ", retograde row: ", reverse(row))

; The 'variable' command takes the name of the variable followed by an
; optional '= <value>' initialization. If you don't provide an
; initialization the variable will be set to #f (boolean false).  The
; value after the = can be any expression, and you can define more
; than one variable with a single 'variable' command by using a comma
; between each variable definition. In this next example we define two
; variables, the first holds a row type we randomly choose from four
; possible row types (using a string to represent the prime retrograde
; inversion and retrograde-inversion row forms) and the second holds a
; transposition offset:

variable row-form = pick(:p, :r, :i, :ri) ,
         row-transp = between(0, 12)
  
;
;; Local variables
;

; A local variable exists only within the specific block of code in
; which it is declared. To create a local variable use the 'with'
; statement inside 'begin...end', 'loop' or 'run' blocks.  Variables
; are bound in sequential order so that later variables can depend on
; the values of earlier ones. This example declares two variables, x
; and y, the value y value depends on the value of x.

begin
  with x = random(12) ,
       y = x + 12
  list(x,y)
end

; Notice that if you try to evaluate x or y OUTSIDE the block an error
; occurs because the variables exist only within the block in which
; they were declared. Executing this next statement will trigger an
; error because x does not exist at the top-level.

x

; A variable local in an inner block will shadow a variable with the
; same name declared in an outer block. In this example, both blocks
; use a variable 'x' but the print statements clearly show that they
; are different variables!

begin
  with x = 1
  print("outer block, x=", x)
  begin
    with x = 2
    print( "inner block, x=", x)
  end
  print( "outer block, x=", x)
end

;
;; Variable assignment: the 'set' command
;

; How can you assign a differnt value to an existing variable?  For
; top-level variables, one solution would be to re-execute the
; variable command but use a different inital value. Another way is to
; ASSIGN the variable a new value using the SET command.

variable row = {11 10 9 8 7 6 5 4 3 2 1 0},
         row-form = :p,
         row-transp = 0

print("row=", row, " row-form=", row-form, " row-transp=", row-transp)

set row = {0 1 2 3 4 5 6 7 8 9 10 11},
    row-form = :r,
    row-transp = between(6, 12)

print("row=", row, " row-form=", row-form, " row-transp=", row-transp)


; The 'set' command acts very much like the variable command,
; including the ability to operate on more than one variable at a
; time. But there are several important differences. First, set does
; not actualy create variables, it sets an existing variable to a new
; value. Secondly 'set' supports many more assignment operators than
; the = initializer set operators are:

;   =       assign a variable a value
;   +=      increment a variable by an amount
;   *=      scale a variable by an amount
;   &=      add a value to the end of a variable's list
;   ^=      append a list to the end of a variable's list
;   @=      add a value to the front of a variable's list
;   <=      minimize a variable 
;   >=      maximize a variable 

; Here is an example of each set operator in action. Each example uses
; 'set' inside a loop that you can se the effect when it repeats
; several times. More about the loop statement in another tutorial!

; += increments a variable by a value:

begin 
  with var = 0
  loop repeat 5 set var += 1 end
  var
end

; *= scales a variable by a value

begin 
  with var = 1
  loop repeat 5 set var *= 10 end
  var
end

; &= adds a value to the end of a variable

begin 
  with var = {}
  loop repeat 5 set var &= random(128) end
  var
end

; ^= appends a list to the end of a variable

begin 
  with var = {}
  loop repeat 5 set var ^= list(1, 2, random(128)) end
  var
end

; @= adds a value to the front of a variable

begin 
  with var = {-1}
  loop repeat 5 set var @= random(128) end
  var
end

; <= minimizes a value

begin 
  with var = 128
  loop repeat 5 set var <= random(128) end
  var
end

; >= maximizes a value

begin 
  with var = -1
  loop repeat 5 set var <= random(128) end
  var
end

