;; Examples of 1D and 2D Cellular Automata

;; To create an automata call '(make-automata states rule ...)'  and
;; pass it a list of initial integer states and a rule function. For
;; 2D automata states is a list of lists where each sublist defines a
;; row of inital states. The rule function implements the automata's
;; state transition. It is called automatically and passed two
;; arguments: the automata and the index of the current cell and it
;; returns the NEXT state of the cell at index. Inside the rule
;; function use the function '(cell-state automata index . neighbor)'
;; to accesses the state of the current cell and any of its neighbors,
;; where neighbor is a positive or negative increment to the
;; index. cell-state automatically computes addresses mod the size of
;; the cell array so you do not have to perform bounds checking when
;; you access neighbors. For 2D automata each index and neighbor is a
;; two dimensional point. You specify 2D points and 2D increments
;; using the '(xy x y)' function, ie '(cell-state index (xy -1 -1))'
;; would access the value of the north-west neighbor of the current
;; cell in a 2D automata.

;; Once an automata has been created, use the '(state automata . all)'
;; function to read the next state from it, or to return a list of all
;; states in the current generation if the optional second argument is
;; true. You can associate a grapical state window with an automata by
;; providing the optional 'window' and 'colormap' arguments (both must
;; be specified if either is)

;; :window
;;    the window title (string) for the new window. an error is
;;    signaled if a window with that name is aready open
;; colormap:
;;    a list of state and color pairs: (s1 c1 s2 c2 ... sN cN) all the
;;    states and their colors must be provided. colors are symbols or
;;    strings, the complet list of colors is available in the *colors*
;;    variable.
;; :backgroundcolor
;;    a string or symbol naming the background color for the window.
;; cellsize:
;;    the size in pixels of each cell in the state window display.
;;    the value of cellsize defaults to 50
;; cellbordersize:
;;    the size in pixes of space between each cell in the state window
;;    display. the default cellbordersize is 1
;; :rows
;;    for 1D automata this specifies the number of successive
;;    generations you want to display in the window. each generation
;;    is shown as a "row" in the display. the default is 1

function add-neighbors (auto, index) 
  with left = cell-state(auto, index, -1),
        right = cell-state(auto, index, 1)
  modulo(left + right, 3)
end

variable foo = make-automata({0 1 0 1 0}, add-neighbors)

state(foo, #t)

;; add a state window to display states as they are
;; read. both the 'window' and 'colormap' arguments are required for
;; window displays. the colormap is a list of pairs: (state1 color1
;; state1 color2 ... stateN colorN) where states are integers and
;; colors are color names (symbols or strings). the complete list of
;; colors are in the variable *colors*

variable foo = make-automata({1 0 2 2 0 2 1 2},
                             add-neighbors,
                             window: "my state window",
                             colormap: {0 red 1 green 2 blue},
                             backgroundcolor: "azure")

state(foo, #t)

;; display and sonify an eight-state automata in real time

function 8states (auto, index)
  with left = cell-state(auto, index, -1),
       here = cell-state(auto, index),
       right = cell-state(auto, index, 1)
  logand(left, 4) + logand(here, 2) + logand(right, 1)
end
  
process play-8notes(len, auto, keys)
  for i below len
  for s = state(auto)
  for k = nth(keys, s)
  for r = rescale( s, 0, 7, .150, .400)
  mp:midi(0, r * 1.9, k )
  wait r
end

begin with len = 64 * 2,
           keys = keynum({c4 fs4 af4 b4 d5 ef5 e5 g5}),
           colors = {0 pink 1 purple 2 yellow 3 red 
                     4 green 5 brown 6 blue 7 orange},
           auto = make-automata({0 1 2 3 4 5 6 7}, 
                                8states,
                                window: "my 8 states" ,
                                colormap: colors)
  sprout(play-8notes(len, auto, keys))
end

;;;
;;;  A "left shift" automata; next state is from i+1
;;;

function left-shift(auto, index)
  cell-state(auto, index, 1)
end

variable go-left =
  make-automata({0 1 2 3}, left-shift,
                window: "my left shift",
                colormap: {0 pink 1 yellow 2 green 3 blue},
                cellsize: 100)

; eval this multiple times to rotate through cells

print state(go-left)

;;
;; right sum mod 3
;;

function sum-right(auto, index)
  ;; add cell to rightward cell's value mod 3
  with here = cell-state( auto, index),
       right = cell-state( auto, index, 1)
  modulo(here + right, 3)
end

variable go-right =
  make-automata({1 0 0 2}, 
                sum-right,
                window: "my right sum",
                colormap: {0 blue 1 green 2 red},
                cellsize: 100)

state( go-right, #t)

variable go-right =
  make-automata({2 2 1 0 1 1 0 1 1 2 0 0 0 1 1 0 1 0 1 2
                 1 2 1 0 1 1 1 2 2 2 0 1 2 2 2 1 0 2 0 1},
                 sum-right,
                 window: "Go Right!",
                 colormap: {0 pink 1 aqua 2 magenta} ,
                 cellsize: 4,
                 rows: 8)

print state( go-right, #t)

;;;
;;; 2D automata using HGLASS rule set. 5 postions are examined,
;;; allowing up to 32 different states.
;;;

;; lookup vector for new state

variable hglass-states =
  list->vector({0 1 1 1 0 0 0 0   0 0 0 1 0 0 0 0   
        `       0 0 0 0 0 1 0 0   0 1 0 0 0 1 1 1})

function hglass(auto, index)
  ;; ior east, west, south and north to compute new state
  with here = cell-state(auto, index),
       east = cell-state(auto, index, xy(1, 0)),
       west = cell-state(auto, index, xy(-1, 0)),
       south  = cell-state(auto, index, xy(0, 1)),
       north  = cell-state(auto, index, xy(0, -1))
  vector-ref(hglass-states,
             logior(ash(east, 4),
                    ash(west, 3),
                    ash(south, 2),
                    ash(north, 1),
                    here))
end
    
variable my-hglass =
  ;; random first generation
  make-automata({{1 0 0 0 0 1 0 0} 
                 {1 0 1 1 0 0 1 1} 
                 {0 0 0 0 1 0 1 1} 
                 {1 0 0 1 1 1 1 0}
                 {1 0 1 1 1 0 1 1}
                 {0 0 0 1 0 0 1 1}
                 {1 1 1 0 0 1 0 1}
                 {1 1 0 1 1 1 1 1}},
                 hglass,
                 window: "my hglass automata",
                 colormap: {0 pink 1 lavender})

state(my-hglass, #t)

;;;
;;; pretty square
;;;

variable hglass-square =
  make-automata({{0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0}
       	         {0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0}
       	         {0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0}
       	         {0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0}
       	         {0 0 0 0 1 1 1 1 1 1 1 1 0 0 0 0}
       	         {0 0 0 0 1 1 1 1 1 1 1 1 0 0 0 0}
       	         {0 0 0 0 1 1 1 1 1 1 1 1 0 0 0 0}
       	         {0 0 0 0 1 1 1 1 1 1 1 1 0 0 0 0}
       	         {0 0 0 0 1 1 1 1 1 1 1 1 0 0 0 0}
       	         {0 0 0 0 1 1 1 1 1 1 1 1 0 0 0 0}
       	         {0 0 0 0 1 1 1 1 1 1 1 1 0 0 0 0}
       	         {0 0 0 0 1 1 1 1 1 1 1 1 0 0 0 0}
       	         {0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0}
       	         {0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0}
       	         {0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0}
       	         {0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0}},
                hglass,
                window: "my hglass automata",
                colormap: '{0 pink 1 lavender},
                backgroundcolor: "yellow")

state(hglass-square, #t)

;;;
;;; Conway's game of Life.
;;;

function life(auto, index)
  with ul = cell-state(auto, index, xy(-1, -1)),
       um = cell-state(auto, index, xy(0, -1)),
       ur = cell-state(auto, index, xy(1, -1)), 
       ml = cell-state(auto, index, xy(-1, 0)),
       me = cell-state(auto, index),
       mr = cell-state(auto, index, xy(1, 0)),
       ll = cell-state(auto, index, xy(-1, 1)),
       lm = cell-state(auto, index, xy(0, 1)),
       lr = cell-state(auto, index, xy(1, 1)),
       sum =  (ul + um + ur + ml + mr + ll + lm + lr)
  if (me = 0) ; dead cell
    if ( sum = 3)  1 else  0 end
  else
    if ((2 = sum) | ( 3 = sum)) 1 else 0 end
  end
end

variable game-of-life = 
  make-automata({{0 0 0 0 0 0 0 0}
                 {0 0 0 1 1 0 1 0}
                 {0 0 1 0 1 0 1 0}
                 {0 0 1 1 1 0 0 0}
                 {0 1 0 0 1 1 1 0}
                 {0 1 1 1 0 0 0 0}
                 {0 0 0 1 1 0 1 0}
                 {0 0 0 0 0 0 0 0}},
                 life,
                 window: "my life",
                 colormap: {0 red 1 green},
                 cellsize: 40 ,
                 cellbordersize: 1)

state(game-of-life, #t)

variable other-life = 
  make-automata({{1 0 0 1 0 0 1 1}
                 {1 0 1 1 0 1 0 1}
                 {0 1 1 1 1 0 0 1}
                 {1 1 0 0 0 1 1 1}
                 {1 1 0 0 0 1 1 0} 
                 {0 1 0 0 1 0 0 0} 
                 {1 1 0 1 0 1 0 0}
                 {1 0 0 1 1 0 0 0}},
                life,
                window: "my other life",
                colormap: {0 aquamarine 1 burlywood},
                cellbordersize: 1,
                cellsize: 16)
  
state(other-life, #t)