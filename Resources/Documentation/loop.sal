;
;; Iteration
;

; To run examples put the cursor at the end of each expression and
; press Command-Return. Look in the console window for any output.

; Here is one way to execute a statement five times

begin
  print("a random keynum: ", random(128))
  print("a random keynum: ", random(128))
  print("a random keynum: ", random(128))
  print("a random keynum: ", random(128))
  print("a random keynum: ", random(128))
end

; Loop is a much better way of accomplishing the same thing!

loop repeat 5
  print("a random keynum: ", random(128))
end

; Note that with a loop you can double the amount of work done without
; adding any additional code

loop repeat 10
  print("a random keynum: ", random(128))
end

; The 'loop' statement performs iteration: it repeatedly executes an
; action statement some number of times. The simplest way to tell a
; loop how many times to iterate is to use its 'repeat' clause. the
; repeat value can a number or any sexpr that evaluates to a number

loop repeat random(10) 
  print("a random keynum: ", random(128))
end

; Loop's 'end' tag makes it an implicit block so you can execute more
; than one action statement

loop repeat 4
  print("a random keynum: ", random(128))
  print("approximately one beat: ", vary(1, .05))
  print("a random dead composer: ", pick({ bach schoenberg berg mozart} ))
  print("----------------------------")
end

; The loop's action can be any SAL statement:

loop with foo = {}
  repeat 4
  set foo &= random(128)
  finally print("my random keys=", foo)
end

; The 'finally' clause lets you associate an expression with the
; END of the iteration. If given, the finally statement is executed
; one time only, immediately after the iteration has stopped, and
; the value of the expression will be returned as the value of the
; loop.

loop repeat 10
  print("a random keynum: ", random(128))
  finally print("All done!")
end

; This loop collects 10 random numbers and returns them

loop with x = {} repeat 10
  set x &= random(127)
  finally x
end

; Note that a finally clause will execute even if no
; iteration occurs!

loop repeat 0
  print("a random keynum: ", random(128))
  finally print("All done!")
end

; Use a begin...end block if you want to execute more than one finally
; statement:

loop with var = {}, sum = 0 
  repeat 10 for x = random(128)
  set var &= x, sum += x
  finally
  begin
    with avr = sum / 10.0
    print("keys: ", var, " average: ", avr)
  end
end

;
;; Stepping statements
; 

; You can specify any number of 'for' clauses that increment stepping
; variables each time through the loop.  All stepping clauses must
; appear before the action statement. In this example the stepping
; variable i is set to a new random key number each time through the
; loop

; general stepping:  'for <var> = <sexpr>' ...

loop repeat 10
  for i = random(128)
  print("a random major chord: ", i, " ", i + 4, " ", i + 7)
  finally print("All done!")
end

; You can have any number of 'for statements'. This example uses three
; stepping variables: key rhy and amp. Notice that the amp's 'then'
; clause causes it to be randomly chosen only on the FIRST iteration
; and then incremented by .05 each time after that.

loop repeat 10
  for key = random(128)
  for rhy = pick(1/4, 1/2, 3/4, 1)
  for amp = pick(.1, .3 , .5) then amp + .05
  print("key=", key, " rhy=", rhy, " amp=", amp)
end

; The value of one 'for <var> = ...' variable can depend on
; another. in this example we declare the stepping variable key to
; hold a random keynum and 'maj' to hold a list representing a major
; chord built on whatever keynum was chosen

loop repeat 10
  for keyn = random(128)
  for maj = list(keyn, keyn + 4, keyn + 7)
  print("a random major chord: ", maj)
  finally print("All done!")
end

; TODO: change the preceding loop to include printing random minor,
; diminished and augmented chords. rememeber that you need to use a
; begin ... end block for more than one action!

;
;; List stepping: 'for <var> in <list>'
;

; you can step a variable over a list of elements using the 'in'
; clause. the iteration stops once all the elements in the list have
; been accessed

loop for c in {a b c d e f g }
  print( c)
end

loop for c in {bach beethoven mozart berg webern schoenbeg}
  for q = pick({great fantastic wonderful})
  print(c, " is a ", q, " composer.")
end

;
;; Numerical stepping: 'for <var> from <num> to <num> by <num> ...'
; 

; Numerical stepping clauses automatically increment stepping
; variables by counting. both the starting and stopping bounds for the
; counting can be provided

; Use 'from' to specify the starting value. if 'from' value is not
; provided the variable starts at 0.  the stopping value is specified
; using one of: 'to', 'below', 'downto', 'above'.  

; The 'to' and 'downto' boundary stops iteration just after the
; variable reaches the value

loop for x from 1 to 10
  print("x=", x)
end

loop for x from 10 downto 1
  print("x=", x)
end

; If you omit the 'from' it defaults to 0

loop for x to 10
  print("x=", x)
end
  
; The 'by' clause lets you specify the increment value for the variable

loop for x from 0 to 20 by 2
  for y from 100 downto 10 by 10
  print("x=", x, " y=",y)
end

; You can increment by floating point values too

loop for x from 2.5 to 8 by .1
  print("x=", x)
end

; The 'below' and 'above' boundaries stop iteration just before the
; variable reaches the value

loop for x below 10
  print("x=", x)
end

loop for x from 10 above 0
  print("x=", x)
end

; If more than one stepping clause is provided the loop stops after
; shortest path is reached

loop for x from 0 to 1000 by 10
  for y to 10 by pi
  print("x=", x, " y=",y)
end

; You can also specify a numerical iteration without a stepping
; boundary. but some clause better stop the iteration or it will run
; forever!

loop repeat 10
  for x from 0 by 10
  for y from 0
  for e = expt(y, x)
  print("x=", e)
end

;
;; Accumulating results
;

; One of the most useful things you can with loop is to accumulate
; results in local variables you declare using the 'with' clause. One
; important point: be sure to initialize your variables when you
; declare them to a starting value appropriate for the
; accumulation. For example, if you want to collect values into a
; list, initialize the list to the empty list {} when you declare
; it. If you want to incrementally sum or scale stepping values then
; initialize the local variable to 0 or 1 respectively. If you want to
; minimize values, initialize the minimum to a value larger than any
; minimum value you will iterate and do the opposite when you use
; maximize.

; This example collect all the values of a stepping variable into a
; local variable. the variable is initialized to the empty list when
; it is declared. the set operator &= appends elements to a list.

loop with res = {}
  for i from 1 to 10
  set res &= i
  finally res
end

; Reverse collect all the value of a stepping variable into a list:

loop with res = {}
  for i from 1 to 10
  set res @= i
  finally res
end

; Sum all the values of a stepping variable into a local variable. The
; local variable is initialized to 0 when it is declared. Recall that
; the set operator += increments a variable by a value.

loop with res = 0
  for i from 1 to 10
  set res += i
  finally res
end

; Multiply all the values of a stepping variable into a local
; variable. The local variable is initialized to 1 when it is
; declared. Recall that the set operator *= scales a variable by a
; value.

loop with res = 1
  for i from 1 to 10
  set res *= i
  finally res
end

; This loop both sums and collects random key numbers. It then prints
; the results, along with the average value found:

loop with sum = 0.0, res = {}
  repeat 10
  for j = random(128)
  set sum += j, res &= j
  finally print("res=", res, " avr=", sum / length(res))
end

; This example minimizes random values. The variable is initially set
; to a value greater than any possible values we will minimize:

loop with val = 129 
  repeat 10 
  set val <= random(128)
  finally val
end

; Do the opposite if you maximize:

loop with val = -1
  repeat 10 
  set val >= random(128)
  finally val
end

;
;; Using loop inside functions
;

; Loop is really useful for designing all sorts of musical
; functions. The finally clause can be a 'return' statement to return
; the loop's result from the function!

; One very common type of function transforms an input list into an
; output list. The general form of these function is to decalare a new
; an empty list, then iterate over each element in the old list and
; use set's append operator (&=) to append the transformed element
; onto the new list and finally returning the new list:

; Example: transpose a list of key numbers by a specified interval.

function list-transp (old, i)
  loop with new = {} 
    for k in old
    set new &= k + i
    finally new
  end
end

list-transp({60 61 62 63}, -12)

function makechords (mel)
  loop with res = list()
    for root in mel
    for 3rd = pick(3,4)
    for 5th = pick(6,7,8)
    set res &= list(root, root + 3rd, root + 5th)
    finally res
  end
end

makechords({60 62 63 65 67 68 70 72})

;
;; Stopping iteration using while and until
;

; You can use 'while' or 'until' clauses to halt iteration based on a
; test of some condition. while stops iteration as soon as the
; condition is false. until stops iteration when the test is true:


; Iterate random numbers until a '9' is found:

loop for x = random(10)
  until x = 9 
  print(x)
  finally print( "all done!")
end

; Collect 10 random keynumbers in pentatonic scale:

loop with l = {}
  for x = random(128)
  for p = modulo(x, 12)
  until length(l) = 10
  if (member( p, {1 3 6 8 10} ))
    set l &= x
  end
  finally l
end

; Iterate random numbers until the same value is picked consecutively:

loop with old = -1
  for new = random(20)
  until old = new
  begin
    print("new=", new, " old=", old)
    set old = new
  end
  finally print("all done!")
end

