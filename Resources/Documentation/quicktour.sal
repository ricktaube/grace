;
;;  Sal Quick Tour
;

; To run examples put the cursor at the end of each expression and
; press Command-Return. Look in the console window for any output.

; Sal is an easy-to-learn languange for algorithic composition. It
; provides infix expressions, a few control statements: 'if', 'begin',
; 'loop', and 'set'; and several definitional forms: 'variable',
; 'function' and 'process'.

; Expressions

; An expression is anything that produces a value. Try evaluating
; these arithmetic expressions that involve integers, floats (numbers
; that include a decimal point) and ratios to see what they return:

123

55 + 33

44 = 33

60 * 2.0 * 1/3

7/3 * 5/16

; Expressions don't have to be numeric, they can also involve lists
; (values inside {}), strings (words delimited by ""), the boolean
; values #t and #f (true and false), symbols (plain words) and
; keywords (symbols starting with ':') Here are all the common types
; of data collected in a surrounding list.

{1 2.0 1/3 "hiho!" #t #f foo :foo {x y z} }

; Function Calls

; Computational work is accomplished by defining and calling
; functions. To call a function you type its name followed by any
; input values for the function inside parentheses (). If there is
; more than one input value use commas to separate them and if there
; are no input values specify the parentheses without any
; values. Evaluate these functions calls to see what sorts of
; expressions they return.

list()

list(1)

list(1, 2, 3 + 4)

between(50, 100)

even?(2)

concat("Hi", "ho", "!")

; Function calls can be nested to any level. Interior function calls
; are evaluated before outer function calls.

note(list(random(127), random(127), random(127)))

; Function calls can span more than a single line. In this case put
; the cursor after the last ')' and press Command-Return:

concat({Life is very},
       pick({long short happy sad})
       )

; Some functions accept keyword arguments.  A keyword argument
; consists of a name ending with ':' (e.g. foo: ) followed by the
; argument's value. If more than one keyword argument is supplied
; separate them by commas. In this example the mp:midi function is called
; with two keyword arguments.

mp:midi(key: between(60, 90), amp: .8)

; Do not confuse keyword function arguments with keyword symbols, the
; latter are words that BEGIN with a colon, for example:

pick(:bach, :berg, :chopin)

;
;; Control Statements
;

; Sal provides a handful of control statements: 'if' 'begin' 'set' and
; 'loop'. All but 'set' includes an 'end' delimiter.  To evaluate
; statements that terminate with an 'end', put your cursor just after
; the 'end' and press Command-Return.

begin
  print("Hiho!")
  123
end

; The 'if' statement tests a predicate expression in parentheses to
; determine if its 'then' clause or its (optional) 'else' clause
; should be evaluated.

if (odds(.5))
  list(1, 2, 3)
else
  list(-1, -2, -3)
end

; Clause can hold contain more than one expression.

if (odds(.4))
  print("then clause is the winner!")
  list(1, 2, 3)
else
  print("else clause is the winner!")
  list(-1,- 2, -3)
end

; The 'begin...end' statement sequences expressions, the last
; expression is returned as the value of the entire begin.

begin
  print("in begin!")
  list(1,2,3)
end

; use the 'with' clause to declare local variables inside a begin

begin 
  with a = 4,
       b = a + random(12)
  print("in begin, a=", a, " b=", b)
  list(a, b)
end

; the 'set' statement lets you (re)assign values to existing variables

begin 
  with a = 5
  set a = random(100)
  a
end

; set has a number of different assignment operators and it can assign
; more than a single variable at a time.

begin 
  with a = 0, b = 1, c = 2, d = 3, e = 4, 
       f = {x y}, g = {x y}, h = {a b c}
  set a = -1, b += 5, c *= 10, d >= 20, e <= 20, 
      f &= -99, g @= -99, h ^= g
  list(a,b,c,d,e,f,g,h)
end

; the 'loop ... end' statement defines an iteration. it is very similar to
; Common Lisp's loop macro

loop repeat 10
  print(random(100))
end

loop for i below 10
  print(i)
end

loop repeat 5
  for x = random(200)
  print(x, " squared is ", x ^ 2)
end

; the 'finally' clause can be used to return a value

loop with l = {}
  for i from 1 to 10
  set l &= i
  finally l
end

loop with l  = {}
  repeat 10
  for x = 0 then drunk(x, 3)
  for y from 100 by 10
  set l &= x, l &= y
  finally l
end

;
;; Definitions
;

; Sal provides three definitional forms: 'variable', 'function' and
; 'process'

; The 'variable' statement defines variables that are "global" in the
; environment in which they are defined

variable bar = 33

list(bar, bar * bar)

; More than one variable can be define at a time, the value of the
; last variable will be returned as the statement value

variable bar = -99, baz = {1 2 3}

list(bar,baz)

; The 'function' statement defines a function. The last value in the
; body of the function is returned as its value

function foo ()
  list(1,2,3)
end

foo()

function foo (a, b)
  list(a, b )
end

foo(100,200)

; Use 'with' to declare local variables inside a function

function foo (a, b)
  with c = list(a, b), d = 88
  list(a,b,c, d)
end

foo(100,200)

; Optkey parameters are declared like this:

function foo (&optkey d, e = 4)
  list(d,e)
end

foo()

foo(2,3)

foo(1)

foo(e: 99, d: -99)

; You can mix of required and optkeys

function foo (a, b &optkey d, e = 4)
  list(a,b, d, e)
end

foo(1,2, e: 88)

; The 'process' statement defines an iterative function that blends
; features from functions and loops into a single entity:

process simp(num, rate)
  repeat num
  for k  = between(40, 90)
  mp:midi(key: k)
  wait rate
end

; Once you define a process you call 'sprout' to start it running:

sprout(simp(20, .2))

; Here is the a little process that plays a cyclic pattern of notes
; over and over again until its endtime is reached

process piano-phase (endtime, keys, rate)
  with pat = make-cycle(keys)
  while elapsed() < endtime
  mp:midi(key: next(pat), dur: rate)
  wait rate
end

; This plays two copies of the process in parallel and in real time
; out your midi port (see reich.sal) for more inforamtion.)

begin
  with keys = keynum({e4 fs4 b4 cs5 d5 fs4 e4 cs5 b4 fs4 d5 cs5}),
       stoptime = 20
  sprout(list(piano-phase(stoptime, keys, .167),
              piano-phase(stoptime, keys, .170)))
end

